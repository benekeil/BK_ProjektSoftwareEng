{"ast":null,"code":"import _regeneratorRuntime from \"/Users/benediktkeil/Softwareeng/Test080120/BK_ProjektSoftwareEng/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _assertThisInitialized from \"/Users/benediktkeil/Softwareeng/Test080120/BK_ProjektSoftwareEng/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _possibleConstructorReturn from \"/Users/benediktkeil/Softwareeng/Test080120/BK_ProjektSoftwareEng/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/benediktkeil/Softwareeng/Test080120/BK_ProjektSoftwareEng/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/benediktkeil/Softwareeng/Test080120/BK_ProjektSoftwareEng/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _classCallCheck from \"/Users/benediktkeil/Softwareeng/Test080120/BK_ProjektSoftwareEng/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/benediktkeil/Softwareeng/Test080120/BK_ProjektSoftwareEng/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { __rest } from 'tslib';\nimport React from 'react';\nimport { matchPath, withRouter, BrowserRouter, HashRouter } from 'react-router-dom';\nimport { NavContext, IonLifeCycleContext, DefaultIonLifeCycleContext, getConfig } from '@ionic/react';\nvar count = 0;\n\nvar generateId = function generateId() {\n  return (count++).toString();\n};\n\nvar isDevMode = function isDevMode() {\n  return process && process.env && process.env.NODE_ENV === 'development';\n};\n\nvar RESTRICT_SIZE = 25;\n\nvar LocationHistory =\n/*#__PURE__*/\nfunction () {\n  function LocationHistory() {\n    _classCallCheck(this, LocationHistory);\n\n    this.locationHistory = [];\n  }\n\n  _createClass(LocationHistory, [{\n    key: \"add\",\n    value: function add(location) {\n      this.locationHistory.push(location);\n\n      if (this.locationHistory.length > RESTRICT_SIZE) {\n        this.locationHistory.splice(0, 10);\n      }\n    }\n  }, {\n    key: \"pop\",\n    value: function pop() {\n      this.locationHistory.pop();\n    }\n  }, {\n    key: \"replace\",\n    value: function replace(location) {\n      this.locationHistory.pop();\n      this.locationHistory.push(location);\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.locationHistory = [];\n    }\n  }, {\n    key: \"findLastLocationByUrl\",\n    value: function findLastLocationByUrl(url) {\n      for (var i = this.locationHistory.length - 1; i >= 0; i--) {\n        var location = this.locationHistory[i];\n\n        if (location.pathname.toLocaleLowerCase() === url.toLocaleLowerCase()) {\n          return location;\n        }\n      }\n\n      return undefined;\n    }\n  }, {\n    key: \"previous\",\n    value: function previous() {\n      return this.locationHistory[this.locationHistory.length - 2];\n    }\n  }, {\n    key: \"current\",\n    value: function current() {\n      return this.locationHistory[this.locationHistory.length - 1];\n    }\n  }]);\n\n  return LocationHistory;\n}();\n/**\n * The holistic view of all the Routes configured for an application inside of an IonRouterOutlet.\n */\n\n\nvar ViewStacks =\n/*#__PURE__*/\nfunction () {\n  function ViewStacks() {\n    _classCallCheck(this, ViewStacks);\n\n    this.viewStacks = {};\n  }\n\n  _createClass(ViewStacks, [{\n    key: \"get\",\n    value: function get(key) {\n      return this.viewStacks[key];\n    }\n  }, {\n    key: \"set\",\n    value: function set(key, viewStack) {\n      this.viewStacks[key] = viewStack;\n    }\n  }, {\n    key: \"getKeys\",\n    value: function getKeys() {\n      return Object.keys(this.viewStacks);\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(key) {\n      delete this.viewStacks[key];\n    }\n  }, {\n    key: \"findViewInfoByLocation\",\n    value: function findViewInfoByLocation(location, viewKey) {\n      var _this = this;\n\n      var view;\n      var match;\n      var viewStack;\n\n      if (viewKey) {\n        viewStack = this.viewStacks[viewKey];\n\n        if (viewStack) {\n          viewStack.views.some(matchView);\n        }\n      } else {\n        var keys = this.getKeys();\n        keys.some(function (key) {\n          viewStack = _this.viewStacks[key];\n          return viewStack.views.some(matchView);\n        });\n      }\n\n      var result = {\n        view: view,\n        viewStack: viewStack,\n        match: match\n      };\n      return result;\n\n      function matchView(v) {\n        var matchProps = {\n          exact: v.routeData.childProps.exact,\n          path: v.routeData.childProps.path || v.routeData.childProps.from,\n          component: v.routeData.childProps.component\n        };\n        var myMatch = matchPath(location.pathname, matchProps);\n\n        if (myMatch) {\n          view = v;\n          match = myMatch;\n          return view.location === location.pathname;\n        }\n\n        return false;\n      }\n    }\n  }, {\n    key: \"findViewInfoById\",\n    value: function findViewInfoById() {\n      var _this2 = this;\n\n      var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var view;\n      var viewStack;\n      var keys = this.getKeys();\n      keys.some(function (key) {\n        var vs = _this2.viewStacks[key];\n        view = vs.views.find(function (x) {\n          return x.id === id;\n        });\n\n        if (view) {\n          viewStack = vs;\n          return true;\n        } else {\n          return false;\n        }\n      });\n      return {\n        view: view,\n        viewStack: viewStack\n      };\n    }\n  }]);\n\n  return ViewStacks;\n}();\n\nvar RouteManagerContext =\n/*@__PURE__*/\nReact.createContext({\n  viewStacks: new ViewStacks(),\n  syncView: function syncView() {\n    navContextNotFoundError();\n  },\n  syncRoute: function syncRoute() {\n    navContextNotFoundError();\n  },\n  hideView: function hideView() {\n    navContextNotFoundError();\n  },\n  setupIonRouter: function setupIonRouter() {\n    return Promise.reject(navContextNotFoundError());\n  },\n  removeViewStack: function removeViewStack() {\n    navContextNotFoundError();\n  },\n  getRoute: function getRoute() {\n    navContextNotFoundError();\n  }\n});\n\nfunction navContextNotFoundError() {\n  console.error('IonReactRouter not found, did you add it to the app?');\n}\n/**\n * The View component helps manage the IonPage's lifecycle and registration\n */\n\n\nvar View =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(View, _React$Component);\n\n  function View() {\n    _classCallCheck(this, View);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(View).apply(this, arguments));\n  }\n\n  _createClass(View, [{\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.ionPage) {\n        this.ionPage.removeEventListener('ionViewWillEnter', this.ionViewWillEnterHandler.bind(this));\n        this.ionPage.removeEventListener('ionViewDidEnter', this.ionViewDidEnterHandler.bind(this));\n        this.ionPage.removeEventListener('ionViewWillLeave', this.ionViewWillLeaveHandler.bind(this));\n        this.ionPage.removeEventListener('ionViewDidLeave', this.ionViewDidLeaveHandler.bind(this));\n      }\n    }\n  }, {\n    key: \"ionViewWillEnterHandler\",\n    value: function ionViewWillEnterHandler() {\n      this.context.ionViewWillEnter();\n    }\n  }, {\n    key: \"ionViewDidEnterHandler\",\n    value: function ionViewDidEnterHandler() {\n      this.context.ionViewDidEnter();\n    }\n  }, {\n    key: \"ionViewWillLeaveHandler\",\n    value: function ionViewWillLeaveHandler() {\n      this.context.ionViewWillLeave();\n    }\n  }, {\n    key: \"ionViewDidLeaveHandler\",\n    value: function ionViewDidLeaveHandler() {\n      this.context.ionViewDidLeave();\n    }\n  }, {\n    key: \"registerIonPage\",\n    value: function registerIonPage(page) {\n      this.ionPage = page;\n      this.ionPage.addEventListener('ionViewWillEnter', this.ionViewWillEnterHandler.bind(this));\n      this.ionPage.addEventListener('ionViewDidEnter', this.ionViewDidEnterHandler.bind(this));\n      this.ionPage.addEventListener('ionViewWillLeave', this.ionViewWillLeaveHandler.bind(this));\n      this.ionPage.addEventListener('ionViewDidLeave', this.ionViewDidLeaveHandler.bind(this));\n      this.ionPage.classList.add('ion-page-invisible');\n\n      if (isDevMode()) {\n        this.ionPage.setAttribute('data-view-id', this.props.view.id);\n      }\n\n      this.props.onViewSync(page, this.props.view.id);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return React.createElement(NavContext.Consumer, null, function (value) {\n        var newProvider = Object.assign(Object.assign({}, value), {\n          registerIonPage: _this3.registerIonPage.bind(_this3)\n        });\n        return React.createElement(NavContext.Provider, {\n          value: newProvider\n        }, _this3.props.children);\n      });\n    }\n  }], [{\n    key: \"contextType\",\n    get: function get() {\n      return IonLifeCycleContext;\n    }\n  }]);\n\n  return View;\n}(React.Component);\n/**\n * Manages the View's DOM lifetime by keeping it around long enough to complete page transitions before removing it.\n */\n\n\nvar ViewTransitionManager =\n/*#__PURE__*/\nfunction (_React$Component2) {\n  _inherits(ViewTransitionManager, _React$Component2);\n\n  function ViewTransitionManager(props) {\n    var _this4;\n\n    _classCallCheck(this, ViewTransitionManager);\n\n    _this4 = _possibleConstructorReturn(this, _getPrototypeOf(ViewTransitionManager).call(this, props));\n    _this4.ionLifeCycleContext = new DefaultIonLifeCycleContext();\n    _this4._isMounted = false;\n    _this4.state = {\n      show: true\n    };\n\n    _this4.ionLifeCycleContext.onComponentCanBeDestroyed(function () {\n      if (!_this4.props.mount) {\n        if (_this4._isMounted) {\n          _this4.setState({\n            show: false\n          }, function () {\n            _this4.context.hideView(_this4.props.id);\n          });\n        }\n      }\n    });\n\n    return _this4;\n  }\n\n  _createClass(ViewTransitionManager, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this._isMounted = true;\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this._isMounted = false;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var show = this.state.show;\n      return React.createElement(IonLifeCycleContext.Provider, {\n        value: this.ionLifeCycleContext\n      }, show && this.props.children);\n    }\n  }], [{\n    key: \"contextType\",\n    get: function get() {\n      return RouteManagerContext;\n    }\n  }]);\n\n  return ViewTransitionManager;\n}(React.Component);\n\nvar StackManagerInner =\n/*#__PURE__*/\nfunction (_React$Component3) {\n  _inherits(StackManagerInner, _React$Component3);\n\n  function StackManagerInner(props) {\n    var _this5;\n\n    _classCallCheck(this, StackManagerInner);\n\n    _this5 = _possibleConstructorReturn(this, _getPrototypeOf(StackManagerInner).call(this, props));\n    _this5.routerOutletEl = React.createRef();\n    _this5.id = _this5.props.id || generateId();\n    _this5.handleViewSync = _this5.handleViewSync.bind(_assertThisInitialized(_this5));\n    _this5.handleHideView = _this5.handleHideView.bind(_assertThisInitialized(_this5));\n    _this5.state = {};\n    return _this5;\n  }\n\n  _createClass(StackManagerInner, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.routeManager.setupIonRouter(this.id, this.props.children, this.routerOutletEl.current);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.props.routeManager.removeViewStack(this.id);\n    }\n  }, {\n    key: \"handleViewSync\",\n    value: function handleViewSync(page, viewId) {\n      this.props.routeManager.syncView(page, viewId);\n    }\n  }, {\n    key: \"handleHideView\",\n    value: function handleHideView(viewId) {\n      this.props.routeManager.hideView(viewId);\n    }\n  }, {\n    key: \"renderChild\",\n    value: function renderChild(item, route) {\n      var component = React.cloneElement(route, {\n        computedMatch: item.routeData.match\n      });\n      return component;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this6 = this;\n\n      var routeManager = this.props.routeManager;\n      var viewStack = routeManager.viewStacks.get(this.id);\n      var views = (viewStack || {\n        views: []\n      }).views.filter(function (x) {\n        return x.show;\n      });\n      var ionRouterOutlet = React.Children.only(this.props.children);\n      var childElements = views.map(function (view) {\n        var route = routeManager.getRoute(view.routeId);\n        return React.createElement(ViewTransitionManager, {\n          id: view.id,\n          key: view.key,\n          mount: view.mount\n        }, React.createElement(View, {\n          onViewSync: _this6.handleViewSync,\n          onHideView: _this6.handleHideView,\n          view: view,\n          route: route\n        }, _this6.renderChild(view, route)));\n      });\n      var elementProps = {\n        ref: this.routerOutletEl\n      };\n\n      if (ionRouterOutlet.props.forwardedRef) {\n        ionRouterOutlet.props.forwardedRef.current = this.routerOutletEl;\n      }\n\n      if (isDevMode()) {\n        elementProps['data-stack-id'] = this.id;\n      }\n\n      var routerOutletChild = React.cloneElement(ionRouterOutlet, elementProps, childElements);\n      return routerOutletChild;\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      props.routeManager.syncRoute('', props.children);\n      return state;\n    }\n  }]);\n\n  return StackManagerInner;\n}(React.Component);\n\nvar withContext = function withContext(Component) {\n  return function (props) {\n    return React.createElement(RouteManagerContext.Consumer, null, function (context) {\n      return React.createElement(Component, Object.assign({}, props, {\n        routeManager: context\n      }));\n    });\n  };\n};\n\nvar StackManager = withContext(StackManagerInner);\n\nvar NavManager =\n/*#__PURE__*/\nfunction (_React$Component4) {\n  _inherits(NavManager, _React$Component4);\n\n  function NavManager(props) {\n    var _this7;\n\n    _classCallCheck(this, NavManager);\n\n    _this7 = _possibleConstructorReturn(this, _getPrototypeOf(NavManager).call(this, props));\n    _this7.state = {\n      goBack: _this7.goBack.bind(_assertThisInitialized(_this7)),\n      hasIonicRouter: function hasIonicRouter() {\n        return true;\n      },\n      navigate: _this7.navigate.bind(_assertThisInitialized(_this7)),\n      getStackManager: _this7.getStackManager.bind(_assertThisInitialized(_this7)),\n      getPageManager: _this7.getPageManager.bind(_assertThisInitialized(_this7)),\n      currentPath: _this7.props.location.pathname,\n      registerIonPage: function registerIonPage() {\n        return;\n      } // overridden in View for each IonPage\n\n    };\n    _this7.listenUnregisterCallback = _this7.props.history.listen(function (location) {\n      _this7.setState({\n        currentPath: location.pathname\n      });\n    });\n\n    if (document) {\n      document.addEventListener('ionBackButton', function (e) {\n        e.detail.register(0, function () {\n          _this7.props.history.goBack();\n        });\n      });\n    }\n\n    return _this7;\n  }\n\n  _createClass(NavManager, [{\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.listenUnregisterCallback) {\n        this.listenUnregisterCallback();\n      }\n    }\n  }, {\n    key: \"goBack\",\n    value: function goBack(defaultHref) {\n      this.props.onNavigateBack(defaultHref);\n    }\n  }, {\n    key: \"navigate\",\n    value: function navigate(path, direction) {\n      var ionRouteAction = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'push';\n      this.props.onNavigate(ionRouteAction, path, direction);\n    }\n  }, {\n    key: \"getPageManager\",\n    value: function getPageManager() {\n      return function (children) {\n        return children;\n      };\n    }\n  }, {\n    key: \"getStackManager\",\n    value: function getStackManager() {\n      return StackManager;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(NavContext.Provider, {\n        value: this.state\n      }, this.props.children);\n    }\n  }]);\n\n  return NavManager;\n}(React.Component);\n\nvar RouteManager =\n/*#__PURE__*/\nfunction (_React$Component5) {\n  _inherits(RouteManager, _React$Component5);\n\n  function RouteManager(props) {\n    var _this8;\n\n    _classCallCheck(this, RouteManager);\n\n    _this8 = _possibleConstructorReturn(this, _getPrototypeOf(RouteManager).call(this, props));\n    _this8.locationHistory = new LocationHistory();\n    _this8.routes = {};\n    _this8.ionPageElements = {};\n    _this8.routerOutlets = {};\n    _this8.firstRender = true;\n    _this8.listenUnregisterCallback = _this8.props.history.listen(_this8.historyChange.bind(_assertThisInitialized(_this8)));\n    _this8.handleNavigate = _this8.handleNavigate.bind(_assertThisInitialized(_this8));\n    _this8.navigateBack = _this8.navigateBack.bind(_assertThisInitialized(_this8));\n    _this8.state = {\n      viewStacks: new ViewStacks(),\n      hideView: _this8.hideView.bind(_assertThisInitialized(_this8)),\n      setupIonRouter: _this8.setupIonRouter.bind(_assertThisInitialized(_this8)),\n      removeViewStack: _this8.removeViewStack.bind(_assertThisInitialized(_this8)),\n      syncView: _this8.syncView.bind(_assertThisInitialized(_this8)),\n      syncRoute: _this8.syncRoute.bind(_assertThisInitialized(_this8)),\n      getRoute: _this8.getRoute.bind(_assertThisInitialized(_this8))\n    };\n\n    _this8.locationHistory.add({\n      hash: window.location.hash,\n      key: generateId(),\n      pathname: window.location.pathname,\n      search: window.location.search,\n      state: {}\n    });\n\n    return _this8;\n  }\n\n  _createClass(RouteManager, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(_prevProps, prevState) {\n      // Trigger a page change if the location or action is different\n      if (this.state.location && prevState.location !== this.state.location || prevState.action !== this.state.action) {\n        var viewStacks = Object.assign(new ViewStacks(), this.state.viewStacks);\n        this.setActiveView(this.state.location, this.state.action, viewStacks);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.listenUnregisterCallback) {\n        this.listenUnregisterCallback();\n      }\n    }\n  }, {\n    key: \"getRoute\",\n    value: function getRoute(id) {\n      return this.routes[id];\n    }\n  }, {\n    key: \"hideView\",\n    value: function hideView(viewId) {\n      var viewStacks = Object.assign(new ViewStacks(), this.state.viewStacks);\n\n      var _viewStacks$findViewI = viewStacks.findViewInfoById(viewId),\n          view = _viewStacks$findViewI.view;\n\n      if (view) {\n        view.show = false;\n        view.isIonRoute = false;\n        view.prevId = undefined;\n        view.key = generateId();\n        delete this.ionPageElements[view.id];\n        this.setState({\n          viewStacks: viewStacks\n        });\n      }\n    }\n  }, {\n    key: \"historyChange\",\n    value: function historyChange(location, action) {\n      var ionRouteAction = this.currentIonRouteAction === 'pop' ? 'pop' : action.toLowerCase();\n      var direction = this.currentRouteDirection;\n\n      if (ionRouteAction === 'push') {\n        this.locationHistory.add(location);\n      } else if (ionRouteAction === 'pop') {\n        this.locationHistory.pop();\n        direction = direction || 'back';\n      } else if (ionRouteAction === 'replace') {\n        this.locationHistory.replace(location);\n        direction = 'none';\n      }\n\n      if (direction === 'root') {\n        this.locationHistory.clear();\n        this.locationHistory.add(location);\n      }\n\n      location.state = location.state || {\n        direction: direction\n      };\n      this.setState({\n        location: location,\n        action: ionRouteAction\n      });\n      this.currentRouteDirection = undefined;\n      this.currentIonRouteAction = undefined;\n    }\n  }, {\n    key: \"setActiveView\",\n    value: function setActiveView(location, action, viewStacks) {\n      var _this9 = this;\n\n      var direction = location.state && location.state.direction || 'forward';\n      var leavingView;\n      var viewStackKeys = viewStacks.getKeys();\n      var shouldTransitionPage = false;\n      var leavingViewHtml;\n      viewStackKeys.forEach(function (key) {\n        var _viewStacks$findViewI2 = viewStacks.findViewInfoByLocation(location, key),\n            enteringView = _viewStacks$findViewI2.view,\n            enteringViewStack = _viewStacks$findViewI2.viewStack,\n            match = _viewStacks$findViewI2.match;\n\n        if (!enteringView || !enteringViewStack) {\n          return;\n        }\n\n        leavingView = viewStacks.findViewInfoById(_this9.activeIonPageId).view;\n\n        if (enteringView.isIonRoute) {\n          enteringView.show = true;\n          enteringView.mount = true;\n          enteringView.routeData.match = match;\n          shouldTransitionPage = true;\n          _this9.activeIonPageId = enteringView.id;\n\n          if (leavingView) {\n            if (action === 'push' && direction === 'forward') {\n              /**\n               * If the page is being pushed into the stack by another view,\n               * record the view that originally directed to the new view for back button purposes.\n               */\n              enteringView.prevId = leavingView.id;\n            } else if (action === 'pop' || action === 'replace') {\n              leavingView.mount = false;\n\n              _this9.removeOrphanedViews(enteringView, enteringViewStack);\n            }\n\n            leavingViewHtml = enteringView.id === leavingView.id ? _this9.ionPageElements[leavingView.id].outerHTML : undefined;\n          } else {\n            // If there is not a leavingView, then we shouldn't provide a direction\n            direction = undefined;\n          }\n        } else {\n          enteringView.show = true;\n          enteringView.mount = true;\n          enteringView.routeData.match = match;\n        }\n      });\n\n      if (leavingView) {\n        if (!leavingView.isIonRoute) {\n          leavingView.mount = false;\n          leavingView.show = false;\n        }\n      }\n\n      this.setState({\n        viewStacks: viewStacks\n      }, function () {\n        if (shouldTransitionPage) {\n          var _this9$state$viewStac = _this9.state.viewStacks.findViewInfoById(_this9.activeIonPageId),\n              enteringView = _this9$state$viewStac.view,\n              viewStack = _this9$state$viewStac.viewStack;\n\n          if (enteringView && viewStack) {\n            var enteringEl = _this9.ionPageElements[enteringView.id];\n            var leavingEl = leavingView && _this9.ionPageElements[leavingView.id];\n\n            if (enteringEl) {\n              var navDirection;\n\n              if (leavingEl && leavingEl.innerHTML === '') {\n                // Don't animate from an empty view\n                navDirection = undefined;\n              } else if (direction === 'none' || direction === 'root') {\n                navDirection = undefined;\n              } else {\n                navDirection = direction;\n              }\n\n              var shouldGoBack = !!enteringView.prevId;\n              var routerOutlet = _this9.routerOutlets[viewStack.id];\n\n              _this9.commitView(enteringEl, leavingEl, routerOutlet, navDirection, shouldGoBack, leavingViewHtml);\n            } else if (leavingEl) {\n              leavingEl.classList.add('ion-page-hidden');\n              leavingEl.setAttribute('aria-hidden', 'true');\n            }\n          } // Warn if an IonPage was not eventually rendered in Dev Mode\n\n\n          if (isDevMode()) {\n            if (enteringView && enteringView.routeData.match.url !== location.pathname) {\n              setTimeout(function () {\n                var _this9$state$viewStac2 = _this9.state.viewStacks.findViewInfoById(_this9.activeIonPageId),\n                    view = _this9$state$viewStac2.view;\n\n                if (view.routeData.match.url !== location.pathname) {\n                  console.warn('No IonPage was found to render. Make sure you wrap your page with an IonPage component.');\n                }\n              }, 100);\n            }\n          }\n        }\n      });\n    }\n  }, {\n    key: \"removeOrphanedViews\",\n    value: function removeOrphanedViews(view, viewStack) {\n      var _this10 = this;\n\n      // Note: This technique is a bit wonky for views that reference each other and get into a circular loop.\n      // It can still remove a view that probably shouldn't be.\n      var viewsToRemove = viewStack.views.filter(function (v) {\n        return v.prevId === view.id;\n      });\n      viewsToRemove.forEach(function (v) {\n        // Don't remove if view is currently active\n        if (v.id !== _this10.activeIonPageId) {\n          _this10.removeOrphanedViews(v, viewStack); // If view is not currently visible, go ahead and remove it from DOM\n\n\n          var page = _this10.ionPageElements[v.id];\n\n          if (page.classList.contains('ion-page-hidden')) {\n            v.show = false;\n            v.isIonRoute = false;\n            v.prevId = undefined;\n            v.key = generateId();\n            delete _this10.ionPageElements[v.id];\n          }\n\n          v.mount = false;\n        }\n      });\n    }\n  }, {\n    key: \"setupIonRouter\",\n    value: function setupIonRouter(id, children, routerOutlet) {\n      var _this11 = this;\n\n      var views = [];\n      var activeId;\n      var ionRouterOutlet = React.Children.only(children);\n      React.Children.forEach(ionRouterOutlet.props.children, function (child) {\n        var routeId = generateId();\n        _this11.routes[routeId] = child;\n        views.push(createViewItem(child, routeId, _this11.props.history.location));\n      });\n      this.registerViewStack(id, activeId, views, routerOutlet, this.props.location);\n\n      function createViewItem(child, routeId, location) {\n        var viewId = generateId();\n        var key = generateId(); // const route = child;\n\n        var matchProps = {\n          exact: child.props.exact,\n          path: child.props.path || child.props.from,\n          component: child.props.component\n        };\n        var match = matchPath(location.pathname, matchProps);\n        var view = {\n          id: viewId,\n          key: key,\n          routeData: {\n            match: match,\n            childProps: child.props\n          },\n          routeId: routeId,\n          mount: true,\n          show: !!match,\n          isIonRoute: false\n        };\n\n        if (match && view.isIonRoute) {\n          activeId = viewId;\n        }\n\n        return view;\n      }\n    }\n  }, {\n    key: \"registerViewStack\",\n    value: function registerViewStack(stack, activeId, stackItems, routerOutlet, _location) {\n      var _this12 = this;\n\n      this.setState(function (prevState) {\n        var prevViewStacks = Object.assign(new ViewStacks(), prevState.viewStacks);\n        var newStack = {\n          id: stack,\n          views: stackItems\n        };\n        _this12.routerOutlets[stack] = routerOutlet;\n\n        if (activeId) {\n          _this12.activeIonPageId = activeId;\n        }\n\n        prevViewStacks.set(stack, newStack);\n        return {\n          viewStacks: prevViewStacks\n        };\n      }, function () {\n        _this12.setupRouterOutlet(routerOutlet);\n      });\n    }\n  }, {\n    key: \"setupRouterOutlet\",\n    value: function setupRouterOutlet(routerOutlet) {\n      var _this13 = this;\n\n      var canStart, onStart;\n      return _regeneratorRuntime.async(function setupRouterOutlet$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              canStart = function canStart() {\n                var config = getConfig();\n                var swipeEnabled = config && config.get('swipeBackEnabled', routerOutlet.mode === 'ios');\n\n                if (swipeEnabled) {\n                  var _this13$state$viewSta = _this13.state.viewStacks.findViewInfoById(_this13.activeIonPageId),\n                      view = _this13$state$viewSta.view;\n\n                  return !!(view && view.prevId);\n                } else {\n                  return false;\n                }\n              };\n\n              onStart = function onStart() {\n                _this13.navigateBack();\n              };\n\n              routerOutlet.swipeHandler = {\n                canStart: canStart,\n                onStart: onStart,\n                onEnd: function onEnd(_shouldContinue) {\n                  return true;\n                }\n              };\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    }\n  }, {\n    key: \"removeViewStack\",\n    value: function removeViewStack(stack) {\n      var viewStacks = Object.assign(new ViewStacks(), this.state.viewStacks);\n      viewStacks.delete(stack);\n      this.setState({\n        viewStacks: viewStacks\n      });\n    }\n  }, {\n    key: \"syncView\",\n    value: function syncView(page, viewId) {\n      var viewStacks = Object.assign(new ViewStacks(), this.state.viewStacks);\n\n      var _viewStacks$findViewI3 = viewStacks.findViewInfoById(viewId),\n          view = _viewStacks$findViewI3.view;\n\n      if (view) {\n        view.isIonRoute = true;\n        this.ionPageElements[view.id] = page;\n        this.setActiveView(this.state.location || this.props.location, this.state.action, viewStacks);\n      }\n    }\n  }, {\n    key: \"syncRoute\",\n    value: function syncRoute(_id, routerOutlet) {\n      var _this14 = this;\n\n      var ionRouterOutlet = React.Children.only(routerOutlet);\n      React.Children.forEach(ionRouterOutlet.props.children, function (child) {\n        for (var routeKey in _this14.routes) {\n          var route = _this14.routes[routeKey];\n\n          if (route.props.path === child.props.path) {\n            _this14.routes[routeKey] = child;\n          }\n        }\n      });\n    }\n  }, {\n    key: \"commitView\",\n    value: function commitView(enteringEl, leavingEl, ionRouterOutlet, direction, showGoBack, leavingViewHtml) {\n      var newLeavingElement;\n      return _regeneratorRuntime.async(function commitView$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (this.firstRender) {\n                _context2.next = 17;\n                break;\n              }\n\n              if ('componentOnReady' in ionRouterOutlet) {\n                _context2.next = 4;\n                break;\n              }\n\n              _context2.next = 4;\n              return _regeneratorRuntime.awrap(waitUntilRouterOutletReady(ionRouterOutlet));\n\n            case 4:\n              if (!(enteringEl === leavingEl && direction && leavingViewHtml)) {\n                _context2.next = 12;\n                break;\n              }\n\n              // If a page is transitioning to another version of itself\n              // we clone it so we can have an animation to show\n              newLeavingElement = clonePageElement(leavingViewHtml);\n              ionRouterOutlet.appendChild(newLeavingElement);\n              _context2.next = 9;\n              return _regeneratorRuntime.awrap(ionRouterOutlet.commit(enteringEl, newLeavingElement, {\n                deepWait: true,\n                duration: direction === undefined ? 0 : undefined,\n                direction: direction,\n                showGoBack: showGoBack,\n                progressAnimation: false\n              }));\n\n            case 9:\n              ionRouterOutlet.removeChild(newLeavingElement);\n              _context2.next = 14;\n              break;\n\n            case 12:\n              _context2.next = 14;\n              return _regeneratorRuntime.awrap(ionRouterOutlet.commit(enteringEl, leavingEl, {\n                deepWait: true,\n                duration: direction === undefined ? 0 : undefined,\n                direction: direction,\n                showGoBack: showGoBack,\n                progressAnimation: false\n              }));\n\n            case 14:\n              if (leavingEl && enteringEl !== leavingEl) {\n                /** add hidden attributes */\n                leavingEl.classList.add('ion-page-hidden');\n                leavingEl.setAttribute('aria-hidden', 'true');\n              }\n\n              _context2.next = 22;\n              break;\n\n            case 17:\n              enteringEl.classList.remove('ion-page-invisible');\n              enteringEl.style.zIndex = '101';\n              enteringEl.dispatchEvent(new Event('ionViewWillEnter'));\n              enteringEl.dispatchEvent(new Event('ionViewDidEnter'));\n              this.firstRender = false;\n\n            case 22:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this);\n    }\n  }, {\n    key: \"handleNavigate\",\n    value: function handleNavigate(ionRouteAction, path, direction) {\n      this.currentIonRouteAction = ionRouteAction;\n\n      switch (ionRouteAction) {\n        case 'push':\n          this.currentRouteDirection = direction;\n          this.props.history.push(path);\n          break;\n\n        case 'pop':\n          this.currentRouteDirection = direction || 'back';\n          this.props.history.replace(path);\n          break;\n\n        case 'replace':\n          this.currentRouteDirection = 'none';\n          this.props.history.replace(path);\n          break;\n      }\n    }\n  }, {\n    key: \"navigateBack\",\n    value: function navigateBack(defaultHref) {\n      var _this$state$viewStack = this.state.viewStacks.findViewInfoById(this.activeIonPageId),\n          leavingView = _this$state$viewStack.view;\n\n      if (leavingView) {\n        if (leavingView.id === leavingView.prevId) {\n          var previousLocation = this.locationHistory.previous();\n\n          if (previousLocation) {\n            this.handleNavigate('pop', previousLocation.pathname + previousLocation.search);\n          } else {\n            defaultHref && this.handleNavigate('pop', defaultHref);\n          }\n        } else {\n          var _this$state$viewStack2 = this.state.viewStacks.findViewInfoById(leavingView.prevId),\n              enteringView = _this$state$viewStack2.view;\n\n          if (enteringView) {\n            var lastLocation = this.locationHistory.findLastLocationByUrl(enteringView.routeData.match.url);\n\n            if (lastLocation) {\n              this.handleNavigate('pop', lastLocation.pathname + lastLocation.search);\n            } else {\n              this.handleNavigate('pop', enteringView.routeData.match.url);\n            }\n          } else {\n            var currentLocation = this.locationHistory.previous();\n\n            if (currentLocation) {\n              this.handleNavigate('pop', currentLocation.pathname + currentLocation.search);\n            } else {\n              if (defaultHref) {\n                this.handleNavigate('pop', defaultHref);\n              }\n            }\n          }\n        }\n      } else {\n        if (defaultHref) {\n          this.handleNavigate('replace', defaultHref, 'back');\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(RouteManagerContext.Provider, {\n        value: this.state\n      }, React.createElement(NavManager, Object.assign({}, this.props, {\n        onNavigateBack: this.navigateBack,\n        onNavigate: this.handleNavigate\n      }), this.props.children));\n    }\n  }]);\n\n  return RouteManager;\n}(React.Component);\n\nfunction clonePageElement(leavingViewHtml) {\n  var newEl = document.createElement('div');\n  newEl.innerHTML = leavingViewHtml;\n  newEl.classList.add('ion-page-hidden');\n  newEl.style.zIndex = ''; // Remove an existing back button so the new element doesn't get two of them\n\n  var ionBackButton = newEl.getElementsByTagName('ion-back-button');\n\n  if (ionBackButton[0]) {\n    ionBackButton[0].innerHTML = '';\n  }\n\n  return newEl.firstChild;\n}\n\nfunction waitUntilRouterOutletReady(ionRouterOutlet) {\n  return _regeneratorRuntime.async(function waitUntilRouterOutletReady$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          if (!('componentOnReady' in ionRouterOutlet)) {\n            _context3.next = 4;\n            break;\n          }\n\n          return _context3.abrupt(\"return\");\n\n        case 4:\n          setTimeout(function () {\n            waitUntilRouterOutletReady(ionRouterOutlet);\n          }, 0);\n\n        case 5:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  });\n}\n\nvar RouteManagerWithRouter = withRouter(RouteManager);\nRouteManagerWithRouter.displayName = 'RouteManager';\n\nvar IonReactRouter =\n/*#__PURE__*/\nfunction (_React$Component6) {\n  _inherits(IonReactRouter, _React$Component6);\n\n  function IonReactRouter() {\n    _classCallCheck(this, IonReactRouter);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(IonReactRouter).apply(this, arguments));\n  }\n\n  _createClass(IonReactRouter, [{\n    key: \"render\",\n    value: function render() {\n      var _a = this.props,\n          children = _a.children,\n          props = __rest(_a, [\"children\"]);\n\n      return React.createElement(BrowserRouter, Object.assign({}, props), React.createElement(RouteManagerWithRouter, null, children));\n    }\n  }]);\n\n  return IonReactRouter;\n}(React.Component);\n\nvar IonReactHashRouter =\n/*#__PURE__*/\nfunction (_React$Component7) {\n  _inherits(IonReactHashRouter, _React$Component7);\n\n  function IonReactHashRouter() {\n    _classCallCheck(this, IonReactHashRouter);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(IonReactHashRouter).apply(this, arguments));\n  }\n\n  _createClass(IonReactHashRouter, [{\n    key: \"render\",\n    value: function render() {\n      var _a = this.props,\n          children = _a.children,\n          props = __rest(_a, [\"children\"]);\n\n      return React.createElement(HashRouter, Object.assign({}, props), React.createElement(RouteManagerWithRouter, null, children));\n    }\n  }]);\n\n  return IonReactHashRouter;\n}(React.Component);\n\nexport { IonReactHashRouter, IonReactRouter };","map":null,"metadata":{},"sourceType":"module"}