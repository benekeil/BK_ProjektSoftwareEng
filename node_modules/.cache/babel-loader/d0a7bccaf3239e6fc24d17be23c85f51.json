{"ast":null,"code":"var _jsxFileName = \"/Users/benediktkeil/Softwareeng/Test080120/BK_ProjektSoftwareEng/src/App.tsx\";\nimport React from 'react';\nimport { Redirect, Route } from 'react-router-dom';\nimport { IonApp, IonIcon, IonLabel, IonRouterOutlet, IonTabBar, IonTabButton, IonTabs } from '@ionic/react';\nimport { IonReactRouter } from '@ionic/react-router';\nimport { addCircleOutline, calendar, addCircle } from 'ionicons/icons';\nimport NewMonth from './pages/NewMonth';\nimport MonthReview from './pages/MonthReview';\nimport NewInput from './pages/NewInput';\nimport ActualMonth from './pages/ActualMonth';\nimport Start from './pages/Start';\nimport StartError from './errors/starterror';\n/* Core CSS required for Ionic components to work properly */\n\nimport '@ionic/react/css/core.css';\n/* Basic CSS for apps built with Ionic */\n\nimport '@ionic/react/css/normalize.css';\nimport '@ionic/react/css/structure.css';\nimport '@ionic/react/css/typography.css';\n/* Optional CSS utils that can be commented out */\n\nimport '@ionic/react/css/padding.css';\nimport '@ionic/react/css/float-elements.css';\nimport '@ionic/react/css/text-alignment.css';\nimport '@ionic/react/css/text-transformation.css';\nimport '@ionic/react/css/flex-utils.css';\nimport '@ionic/react/css/display.css';\n/* Theme variables */\n\nimport './theme/variables.css';\nimport { DBConfig } from './db/DBConfig';\nimport { initDB, useIndexedDB } from 'react-indexed-db';\ninitDB(DBConfig);\n\n/**\n * \n * Documentation Projekt Softwareengineering\n * Es wurde ein Ausgabenrechner implementiert, \n * der eine Übersicht über das aktuelle Budget und alle Ausgaben/Einnahmen eines Monats gibt\n * @author: Benedikt Keil\n * @version: V2.1\n * \n */\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      actualBudget: 0,\n      startbudget: 0,\n      month: \"test\",\n      monthObj: [{\n        \"month\": \"Test\",\n        \"startbudget\": 0\n      }],\n      monthlistDB: [],\n      allMonthObj: [{\n        \"month\": \"no Month\",\n        \"startbudget\": 0,\n        \"id\": 1\n      }],\n      actualMonthObj: {\n        month: \"no Month\",\n        startbudget: 0,\n        actualbudget: 0,\n        id: 0\n      },\n      inputs: [],\n      monthID: 1,\n      firstLoad: true,\n      normalMode: false,\n      starterror: false\n    };\n\n    this.getMonth = event => {\n      let month = event.detail.value;\n      let monthsubstr = month.substr(0, 7);\n      this.setState({\n        month: monthsubstr\n      });\n      console.log(this.state.month);\n      this.verifiyMonth();\n    };\n\n    this.getStartbudget = event => {\n      this.setState({\n        startbudget: parseInt(event.detail.value)\n      });\n      console.log(this.state.startbudget);\n    };\n\n    this.pushMonthObj = () => {\n      this.state.monthObj.push({\n        \"month\": this.state.month,\n        \"startbudget\": this.state.startbudget\n      });\n      this.forceUpdate();\n\n      const _useIndexedDB = useIndexedDB('monthlist'),\n            add = _useIndexedDB.add,\n            getAll = _useIndexedDB.getAll;\n\n      add({\n        month: this.state.month,\n        startbudget: this.state.startbudget,\n        actualbudget: this.state.startbudget\n      });\n      getAll().then(monthlistDB => {\n        this.setState({\n          monthlistDB: monthlistDB\n        });\n      });\n      this.getActualMonth();\n    };\n\n    this.getMonthObj = () => {\n      const _useIndexedDB2 = useIndexedDB('monthlist'),\n            getAll = _useIndexedDB2.getAll;\n\n      getAll().then(monthlistDB => {\n        this.setState({\n          monthlistDB: monthlistDB\n        });\n      });\n    };\n\n    this.firstLoadApp = () => {\n      const _useIndexedDB3 = useIndexedDB('monthlist'),\n            getAll = _useIndexedDB3.getAll;\n\n      getAll().then(month => {\n        if (month.length === 0) {\n          this.setState({\n            firstLoad: true\n          });\n        } else {\n          this.setState({\n            firstLoad: false,\n            normalMode: true\n          });\n          this.getActualMonth();\n        }\n      });\n      console.log(this.state.month + this.state.startbudget);\n    };\n\n    this.startRechner = () => {\n      const _useIndexedDB4 = useIndexedDB('monthlist'),\n            add = _useIndexedDB4.add,\n            getAll = _useIndexedDB4.getAll;\n\n      if (this.state.month !== \"test\" && this.state.startbudget !== 0) {\n        add({\n          month: this.state.month,\n          startbudget: this.state.startbudget,\n          actualbudget: this.state.startbudget\n        });\n        getAll().then(month => {\n          if (month.length === 0) {\n            add({\n              month: this.state.month,\n              startbudget: this.state.startbudget,\n              actualbudget: this.state.startbudget\n            });\n          }\n\n          getAll().then(month => {\n            this.setState({\n              allMonthObj: month,\n              firstLoad: false,\n              normalMode: true\n            });\n            this.getActualMonth();\n          });\n        });\n      } else {\n        this.setState({\n          starterror: true\n        });\n      }\n    };\n\n    this.getActualMonth = () => {\n      const _useIndexedDB5 = useIndexedDB('monthlist'),\n            getAll = _useIndexedDB5.getAll,\n            getByID = _useIndexedDB5.getByID;\n\n      getAll().then(month => {\n        this.setState({\n          allMonthObj: month\n        });\n      }).then(() => {\n        getByID(Math.max.apply(Math, this.state.allMonthObj.map(o => {\n          this.setState({\n            monthID: o.id\n          });\n          return o.id;\n        }))).then(actualMonth => {\n          console.log(actualMonth);\n          this.setState({\n            actualMonthObj: actualMonth\n          });\n          this.setState({\n            month: this.state.actualMonthObj.month,\n            startbudget: this.state.actualMonthObj.startbudget,\n            actualBudget: this.state.actualMonthObj.actualbudget\n          });\n          this.forceUpdate();\n          console.log(this.state.actualBudget);\n          this.getActualBudget();\n        });\n      });\n    };\n\n    this.getActualBudget = () => {\n      const _useIndexedDB6 = useIndexedDB('inputs'),\n            getAll = _useIndexedDB6.getAll,\n            update = _useIndexedDB6.update;\n\n      getAll().then(inputs => {\n        this.setState({\n          inputs: inputs\n        });\n      }).then(() => {\n        if (this.state.inputs.length !== 0) {\n          this.state.inputs.map(index => {\n            if (index.month === this.state.month && index.added === true) {\n              let actualBudget = index.actualbudget;\n              this.setState({\n                actualBudget: actualBudget\n              });\n            }\n\n            if (index.month === this.state.month && index.added === false) {\n              let actualBudget = index.actualbudget;\n              this.setState({\n                actualBudget: actualBudget\n              });\n\n              if (index.ausgabe) {\n                actualBudget += index.betrag;\n                this.setState({\n                  actualBudget: actualBudget\n                });\n                update({\n                  inputs_id: index.inputs_id,\n                  betrag: index.betrag,\n                  ausgabe: index.ausgabe,\n                  titel: index.titel,\n                  datum: index.datum,\n                  month: index.month,\n                  added: true,\n                  actualbudget: actualBudget\n                });\n              } else {\n                actualBudget -= index.betrag;\n                this.setState({\n                  actualBudget: actualBudget\n                });\n                update({\n                  inputs_id: index.inputs_id,\n                  betrag: index.betrag,\n                  ausgabe: index.ausgabe,\n                  titel: index.titel,\n                  datum: index.datum,\n                  month: index.month,\n                  added: true,\n                  actualbudget: actualBudget\n                });\n              }\n            }\n\n            return {};\n          });\n        }\n      });\n    };\n\n    this.getActualBudget2 = () => {\n      const _useIndexedDB7 = useIndexedDB('inputs'),\n            getAll = _useIndexedDB7.getAll,\n            update = _useIndexedDB7.update;\n\n      getAll().then(inputs => {\n        this.setState({\n          inputs: inputs\n        });\n      }).then(() => {\n        if (this.state.inputs.length !== 0) {}\n      });\n    };\n\n    this.setAddedNew = () => {\n      const _useIndexedDB8 = useIndexedDB('inputs'),\n            getAll = _useIndexedDB8.getAll,\n            update = _useIndexedDB8.update;\n\n      getAll().then(inputs => {});\n    };\n\n    this.verifiyMonth = () => {\n      const _useIndexedDB9 = useIndexedDB('monthlist'),\n            getAll = _useIndexedDB9.getAll;\n\n      getAll().then(month => {\n        month.map(index => {\n          console.log(\"Test Month Verify: \" + this.state.month);\n\n          if (index.month === this.state.month) {\n            this.setState({\n              starterror: true,\n              month: \"test\",\n              normalMode: false\n            });\n            console.log(this.state.starterror);\n          }\n        });\n      });\n    };\n  }\n\n  /**\n   * Diese Methode rendert die TabBar die immer am unteren Bildschirmende gezeigt wird. \n   * Außerdem wird ein Router erstellt der die Navigation zwischen den einzelnen Seiten bereit stellt.\n   * Hier werden auch die Methoden der App Klasse an die anderen Komponenten übergeben, \n   * die dann in den einzelne Komponenten als Props zur Verfügung stehen.\n   */\n  render() {\n    return React.createElement(IonApp, {\n      onLoad: () => {\n        this.firstLoadApp();\n        this.getMonthObj();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 376\n      },\n      __self: this\n    }, this.state.firstLoad && React.createElement(Start, {\n      startRechner: this.startRechner,\n      getMonth: this.getMonth,\n      getStartbudget: this.getStartbudget,\n      month: this.state.month,\n      startbudget: this.state.startbudget,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378\n      },\n      __self: this\n    }), this.state.starterror && React.createElement(StartError, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379\n      },\n      __self: this\n    }), React.createElement(IonReactRouter, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380\n      },\n      __self: this\n    }, this.state.normalMode && React.createElement(IonTabs, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382\n      },\n      __self: this\n    }, React.createElement(IonRouterOutlet, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 383\n      },\n      __self: this\n    }, React.createElement(Route, {\n      path: \"/newMonth\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384\n      },\n      __self: this\n    }, React.createElement(NewMonth, {\n      getMonth: this.getMonth,\n      getStartbudget: this.getStartbudget,\n      pushMonthObj: this.pushMonthObj,\n      month: this.state.month,\n      startbudget: this.state.startbudget,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 385\n      },\n      __self: this\n    })), React.createElement(Route, {\n      path: \"/monthReview\",\n      component: MonthReview,\n      exact: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387\n      },\n      __self: this\n    }, \" \", React.createElement(MonthReview, {\n      monthObj: this.state.monthlistDB,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387\n      },\n      __self: this\n    })), React.createElement(Route, {\n      path: \"/actualMonth\",\n      component: ActualMonth,\n      exact: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388\n      },\n      __self: this\n    }, React.createElement(ActualMonth, {\n      month: this.state.month,\n      budget: this.state.actualBudget,\n      getActualBudget: this.getActualBudget,\n      getActualMonth: this.getActualMonth,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389\n      },\n      __self: this\n    })), React.createElement(Route, {\n      path: \"/newInput\",\n      component: NewInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 391\n      },\n      __self: this\n    }, React.createElement(NewInput, {\n      month: this.state.month,\n      budget: this.state.actualBudget,\n      getActualBudget: this.getActualBudget,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 392\n      },\n      __self: this\n    })), React.createElement(Route, {\n      path: \"/\",\n      render: () => React.createElement(Redirect, {\n        to: \"/start\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 394\n        },\n        __self: this\n      }),\n      exact: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394\n      },\n      __self: this\n    })), React.createElement(IonTabBar, {\n      slot: \"bottom\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397\n      },\n      __self: this\n    }, React.createElement(IonTabButton, {\n      tab: \"newInput\",\n      href: \"/newInput\",\n      onClick: this.getActualBudget,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 398\n      },\n      __self: this\n    }, React.createElement(IonIcon, {\n      icon: addCircle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 399\n      },\n      __self: this\n    }), React.createElement(IonLabel, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400\n      },\n      __self: this\n    }, \"New Input\")), React.createElement(IonTabButton, {\n      tab: \"actualMonth\",\n      href: \"/actualMonth\",\n      onClick: this.getActualBudget,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 402\n      },\n      __self: this\n    }, React.createElement(IonIcon, {\n      icon: calendar,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 403\n      },\n      __self: this\n    }), React.createElement(IonLabel, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 404\n      },\n      __self: this\n    }, \" Actual Month \")), React.createElement(IonTabButton, {\n      tab: \"newMonth\",\n      href: \"/newMonth\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 406\n      },\n      __self: this\n    }, React.createElement(IonIcon, {\n      icon: addCircleOutline,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 407\n      },\n      __self: this\n    }), React.createElement(IonLabel, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 408\n      },\n      __self: this\n    }, \"New Month\")), React.createElement(IonTabButton, {\n      tab: \"monthReview\",\n      href: \"/monthReview\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 410\n      },\n      __self: this\n    }, React.createElement(IonIcon, {\n      icon: calendar,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 411\n      },\n      __self: this\n    }), React.createElement(IonLabel, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 412\n      },\n      __self: this\n    }, \"Month Review\"))))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/benediktkeil/Softwareeng/Test080120/BK_ProjektSoftwareEng/src/App.tsx"],"names":["React","Redirect","Route","IonApp","IonIcon","IonLabel","IonRouterOutlet","IonTabBar","IonTabButton","IonTabs","IonReactRouter","addCircleOutline","calendar","addCircle","NewMonth","MonthReview","NewInput","ActualMonth","Start","StartError","DBConfig","initDB","useIndexedDB","App","Component","state","actualBudget","startbudget","month","monthObj","monthlistDB","allMonthObj","actualMonthObj","actualbudget","id","inputs","monthID","firstLoad","normalMode","starterror","getMonth","event","detail","value","monthsubstr","substr","setState","console","log","verifiyMonth","getStartbudget","parseInt","pushMonthObj","push","forceUpdate","add","getAll","then","getActualMonth","getMonthObj","firstLoadApp","length","startRechner","getByID","Math","max","apply","map","o","actualMonth","getActualBudget","update","index","added","ausgabe","betrag","inputs_id","titel","datum","getActualBudget2","setAddedNew","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Redirect, Route } from 'react-router-dom';\nimport {\n  IonApp,\n  IonIcon,\n  IonLabel,\n  IonRouterOutlet,\n  IonTabBar,\n  IonTabButton,\n  IonTabs\n} from '@ionic/react';\nimport { IonReactRouter } from '@ionic/react-router';\nimport { addCircleOutline, calendar, addCircle } from 'ionicons/icons';\nimport NewMonth from './pages/NewMonth';\nimport MonthReview from './pages/MonthReview';\nimport NewInput from './pages/NewInput';\nimport ActualMonth from './pages/ActualMonth';\nimport Start from './pages/Start';\nimport StartError from './errors/starterror';\n\n/* Core CSS required for Ionic components to work properly */\nimport '@ionic/react/css/core.css';\n\n/* Basic CSS for apps built with Ionic */\nimport '@ionic/react/css/normalize.css';\nimport '@ionic/react/css/structure.css';\nimport '@ionic/react/css/typography.css';\n\n/* Optional CSS utils that can be commented out */\nimport '@ionic/react/css/padding.css';\nimport '@ionic/react/css/float-elements.css';\nimport '@ionic/react/css/text-alignment.css';\nimport '@ionic/react/css/text-transformation.css';\nimport '@ionic/react/css/flex-utils.css';\nimport '@ionic/react/css/display.css';\n\n/* Theme variables */\nimport './theme/variables.css';\n\nimport { DatetimeChangeEventDetail, InputChangeEventDetail } from '@ionic/core';\nimport { DBConfig } from './db/DBConfig';\n\n\nimport { initDB, useIndexedDB } from 'react-indexed-db';\n\n\ninitDB(DBConfig);\n\n\n\ninterface IState {\n  month: string;\n  startbudget: number;\n  monthObj: object[];\n  monthlist?: object[];\n  monthlistDB: object[];\n  actualMonth?: string;\n  actualBudget: number;\n  allMonthObj: object[];\n  actualMonthObj: actualMonthObj;\n  inputs: object[];\n  inputsSetNew\n  monthID: number;\n  firstLoad: boolean;\n  normalMode: boolean;\n  starterror: boolean;\n}\ninterface IProps {\n\n}\n\ninterface actualMonthObj {\n  month: string;\n  startbudget: number;\n  actualbudget: number;\n  id: number;\n}\n\n/**\n * \n * Documentation Projekt Softwareengineering\n * Es wurde ein Ausgabenrechner implementiert, \n * der eine Übersicht über das aktuelle Budget und alle Ausgaben/Einnahmen eines Monats gibt\n * @author: Benedikt Keil\n * @version: V2.1\n * \n */\nclass App extends React.Component<IProps, IState>{\n  state: IState = {\n    actualBudget: 0,\n    startbudget: 0,\n    month: \"test\",\n    monthObj: [{ \"month\": \"Test\", \"startbudget\": 0 }],\n    monthlistDB: [],\n    allMonthObj: [{ \"month\": \"no Month\", \"startbudget\": 0, \"id\": 1 }],\n    actualMonthObj: { month: \"no Month\", startbudget: 0, actualbudget: 0, id: 0 },\n    inputs: [],\n    monthID: 1,\n    firstLoad: true,\n    normalMode: false,\n    starterror: false\n  }\n\n\n  /**\n * Methode um ausgewählten Monat zu speichern\n */\n  public getMonth = (event: CustomEvent<DatetimeChangeEventDetail>) => {\n    let month = event.detail.value;\n    let monthsubstr = month!.substr(0, 7);\n\n\n    this.setState({\n      month: monthsubstr!,\n\n    });\n\n    console.log(this.state.month);\n    this.verifiyMonth();\n  }\n  /**\n  * Methode um eingegebenes Startbudget zu speichern\n  */\n  public getStartbudget = (event: CustomEvent<InputChangeEventDetail>) => {\n    this.setState({\n      startbudget: parseInt(event.detail.value!),\n\n    })\n    console.log(this.state.startbudget);\n\n\n  }\n  /**\n   * Methode um Eingaben über Monat und Startbudget in Indexed DB zu speichern \n   * und um alle gespeicherten Monate in Indexed DB als State (monthlistDB) zu speichern.\n   * Aufruf der Methode getActualMonth um aktuellen Monat in App zu setzen.\n   */\n  public pushMonthObj = () => {\n\n    this.state.monthObj.push({ \"month\": this.state.month, \"startbudget\": this.state.startbudget })\n    this.forceUpdate();\n    const { add, getAll } = useIndexedDB('monthlist');\n\n\n    add({ month: this.state.month, startbudget: this.state.startbudget, actualbudget: this.state.startbudget })\n\n\n\n    getAll().then((monthlistDB) => {\n      this.setState({\n        monthlistDB: monthlistDB\n      })\n    })\n    this.getActualMonth();\n  }\n\n  /**\n   * Methode um alle gespeicherten Monate in Indexed DB abzurufen\n   * und im State monthlistDB zu speichern\n   */\n  public getMonthObj = () => {\n    const { getAll } = useIndexedDB('monthlist');\n    getAll().then((monthlistDB) => {\n      this.setState({\n        monthlistDB: monthlistDB\n      })\n    })\n  }\n\n  /**\n   * Methode um Startseite beim aller ersten Start der App zu starten.\n   * Die Seite wird benötigt um einen ersten Datenbank Eintrag zu generieren.\n   */\n  public firstLoadApp = () => {\n    const { getAll } = useIndexedDB('monthlist');\n    getAll().then((month) => {\n\n      if (month.length === 0) {\n        this.setState({\n          firstLoad: true,\n        })\n      }\n      else {\n        this.setState({\n          firstLoad: false,\n          normalMode: true,\n        })\n        this.getActualMonth();\n      }\n    })\n    console.log(this.state.month+this.state.startbudget);\n  }\n\n\n  /**\n   * Methode erstellt nach betätigen des \"Start Ausgabenrechner\" Buttons den ersten Datenbankeintrag in dem objectStore \"monthlist\"\n   */\n  public startRechner = () => {\n   \n    const { add, getAll } = useIndexedDB('monthlist');\n    if (this.state.month !== \"test\" && this.state.startbudget !== 0){\n    add({ month: this.state.month, startbudget: this.state.startbudget, actualbudget: this.state.startbudget });\n    getAll().then((month) => {\n      \n      if (month.length === 0) {\n        add({ month: this.state.month, startbudget: this.state.startbudget, actualbudget: this.state.startbudget });\n      }\n      getAll().then((month) => {\n\n\n        this.setState({\n          allMonthObj: month,\n          firstLoad: false,\n          normalMode: true,\n        })\n\n        this.getActualMonth();\n      })\n    })\n    }\n    else {\n    this.setState({\n        starterror: true,\n    })\n    }\n  }\n\n\n  /**\n   * Methode um aktuellen Monat (letzter hinzugefügter Monat) abzurufen\n   * und speichern der Werte dieses Monats als State (month, startbudget, actualbudget).\n   * Aufruf der Methode getActualBudget um aktuelles Budget abzurufen, wenn sich der Monat ändert.\n   */\n  public getActualMonth = () => {\n\n    const { getAll, getByID } = useIndexedDB('monthlist');\n    getAll().then((month) => {\n\n\n      this.setState({\n        allMonthObj: month\n      })\n    }).then(() => {\n      getByID(Math.max.apply(Math, this.state.allMonthObj.map((o: any) => { this.setState({ monthID: o.id }); return o.id }))).then((actualMonth) => {\n        console.log(actualMonth);\n\n        this.setState({\n          actualMonthObj: actualMonth,\n        })\n        this.setState({\n          month: this.state.actualMonthObj.month,\n          startbudget: this.state.actualMonthObj.startbudget,\n          actualBudget: this.state.actualMonthObj.actualbudget,\n        })\n        this.forceUpdate();\n        console.log(this.state.actualBudget)\n        this.getActualBudget();\n\n\n      })\n    })\n\n  }\n\n\n\n  /**\n   * Methode um aktuelles Budget aller Inputs des aktuellen Monats zu berechnen.\n   * Speichert den Wert in State (aktualBudget) \n   */\n  public getActualBudget = () => {\n   \n    const { getAll, update } = useIndexedDB('inputs');\n\n    getAll().then((inputs) => {\n\n      this.setState({\n        inputs: inputs\n      })\n    }).then(() => {\n\n      if (this.state.inputs.length !== 0) {\n        \n        this.state.inputs.map((index: any) => {\n          if (index.month === this.state.month && index.added === true){\n            let actualBudget = index.actualbudget;\n            this.setState({\n              actualBudget: actualBudget,\n            })\n          }\n          if (index.month === this.state.month && index.added === false) {\n\n            let actualBudget = index.actualbudget;\n            this.setState({\n              actualBudget: actualBudget,\n            })\n            if (index.ausgabe) {\n\n              actualBudget += index.betrag;\n              this.setState({\n                actualBudget: actualBudget,\n              })\n              update({ inputs_id: index.inputs_id, betrag: index.betrag, ausgabe: index.ausgabe, titel: index.titel, datum: index.datum, month: index.month, added: true, actualbudget: actualBudget });\n              \n            }\n            else {\n              actualBudget -= index.betrag;\n              this.setState({\n                actualBudget: actualBudget,\n              });\n              update({ inputs_id: index.inputs_id, betrag: index.betrag, ausgabe: index.ausgabe, titel: index.titel, datum: index.datum, month: index.month, added: true, actualbudget: actualBudget });\n              \n            }\n          }\n\n          return {\n           }\n         })\n       }\n    })\n  }\n\n  public getActualBudget2=() =>{\n    const { getAll, update } = useIndexedDB('inputs');\n    getAll().then((inputs) => {\n\n      this.setState({\n        inputs: inputs\n      })\n    }).then(() => {\n      if (this.state.inputs.length !== 0) {\n      \n      \n\n      }\n    })\n  }\n\n  public setAddedNew= () => {\n    const {getAll, update} = useIndexedDB('inputs');\n\n    getAll().then((inputs) =>{\n        \n      \n    })    \n\n  }\n\n  public verifiyMonth = ()=>{\n    const { getAll } = useIndexedDB('monthlist');\n    getAll().then((month)=> {\n      month.map((index: any)=>{\n        console.log(\"Test Month Verify: \" + this.state.month)\n        if(index.month === this.state.month){\n          this.setState({\n            starterror: true,\n            month: \"test\",\n            normalMode: false,\n          })\n          console.log(this.state.starterror);\n        }\n      })\n    })\n\n  }\n\n  /**\n   * Diese Methode rendert die TabBar die immer am unteren Bildschirmende gezeigt wird. \n   * Außerdem wird ein Router erstellt der die Navigation zwischen den einzelnen Seiten bereit stellt.\n   * Hier werden auch die Methoden der App Klasse an die anderen Komponenten übergeben, \n   * die dann in den einzelne Komponenten als Props zur Verfügung stehen.\n   */\n  public render() {\n\n    return (\n      <IonApp onLoad={() => { this.firstLoadApp(); this.getMonthObj();}}>\n\n        {this.state.firstLoad && (<Start startRechner={this.startRechner} getMonth={this.getMonth} getStartbudget={this.getStartbudget} month={this.state.month} startbudget={this.state.startbudget}></Start>)}\n        {this.state.starterror && (<StartError></StartError>)}\n        <IonReactRouter>\n\n          {this.state.normalMode && (<IonTabs>\n            <IonRouterOutlet>\n              <Route path=\"/newMonth\" >\n                <NewMonth getMonth={this.getMonth} getStartbudget={this.getStartbudget} pushMonthObj={this.pushMonthObj} month={this.state.month} startbudget={this.state.startbudget}></NewMonth>\n              </Route>\n              <Route path=\"/monthReview\" component={MonthReview} exact={true}> <MonthReview monthObj={this.state.monthlistDB}></MonthReview></Route>\n              <Route path=\"/actualMonth\" component={ActualMonth} exact={true}>\n                <ActualMonth month={this.state.month} budget={this.state.actualBudget} getActualBudget={this.getActualBudget} getActualMonth={this.getActualMonth}></ActualMonth>\n              </Route>\n              <Route path=\"/newInput\" component={NewInput}>\n                <NewInput month={this.state.month} budget={this.state.actualBudget} getActualBudget={this.getActualBudget} ></NewInput>\n              </Route>\n              <Route path=\"/\" render={() => <Redirect to=\"/start\" />} exact={true} />\n            </IonRouterOutlet>\n\n            <IonTabBar slot=\"bottom\">\n              <IonTabButton tab=\"newInput\" href=\"/newInput\" onClick={this.getActualBudget}>\n                <IonIcon icon={addCircle} />\n                <IonLabel>New Input</IonLabel>\n              </IonTabButton>\n              <IonTabButton tab=\"actualMonth\" href=\"/actualMonth\" onClick={this.getActualBudget}>\n                <IonIcon icon={calendar} />\n                <IonLabel> Actual Month </IonLabel>\n              </IonTabButton>\n              <IonTabButton tab=\"newMonth\" href=\"/newMonth\">\n                <IonIcon icon={addCircleOutline} />\n                <IonLabel>New Month</IonLabel>\n              </IonTabButton>\n              <IonTabButton tab=\"monthReview\" href=\"/monthReview\">\n                <IonIcon icon={calendar} />\n                <IonLabel>Month Review</IonLabel>\n              </IonTabButton>\n\n\n            </IonTabBar>\n          </IonTabs>)}\n\n        </IonReactRouter>\n      </IonApp>\n    )\n  };\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}