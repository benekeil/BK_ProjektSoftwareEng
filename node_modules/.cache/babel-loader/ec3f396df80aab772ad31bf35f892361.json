{"ast":null,"code":"var _jsxFileName = \"/Users/benediktkeil/Softwareeng/Test080120/BK_ProjektSoftwareEng/src/pages/MonthReview.tsx\";\nimport React from 'react';\nimport { IonContent, IonHeader, IonItem, IonLabel, IonList, IonPage, IonTitle, IonToolbar, IonSelect, IonSelectOption, IonGrid, IonRow, IonCol } from '@ionic/react';\nimport { useIndexedDB } from 'react-indexed-db';\n\n/**\n * Klasse oder Komponente die alle bisher hinzugefügten Monate in einer Auswahl auflistet \n * und nach Auswahl eines Monats dessen kompletten Eingaben aufzeigt\n */\nclass MonthReview extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      inputs: [],\n      reviewedMonth: \"\",\n      monthlist: [],\n      endBudget: 0\n    };\n\n    this.getMonthReview = event => {\n      this.setState({\n        reviewedMonth: event.detail.value\n      });\n      this.getMonthInputs();\n      this.getMonthValues();\n    };\n\n    this.getMonthInputs = () => {\n      const _useIndexedDB = useIndexedDB('inputs'),\n            getAll = _useIndexedDB.getAll,\n            update = _useIndexedDB.update;\n\n      getAll().then(inputs => {\n        this.setState({\n          inputs: inputs,\n          summeInputs: 0\n        });\n      }).then(() => {\n        if (this.state.inputs.length !== 0) {\n          this.state.inputs.map(index => {\n            if (index.month === this.state.reviewedMonth.substr(0, 7)) {\n              let summeInputs = this.state.summeInputs;\n\n              if (index.ausgabe) {\n                summeInputs -= index.betrag;\n                this.setState({\n                  summeInputs: summeInputs\n                });\n              } else {\n                summeInputs += index.betrag;\n                this.setState({\n                  summeInputs: summeInputs\n                });\n              }\n            }\n          });\n        }\n      }).then(() => {\n        let actualBudget = this.state.startbudget - this.state.summeInputs;\n        this.setState({\n          endBudget: actualBudget\n        });\n      });\n    };\n\n    this.getMonthValues = () => {\n      const _useIndexedDB2 = useIndexedDB('monthlist'),\n            getAll = _useIndexedDB2.getAll;\n\n      getAll().then(monthlist => {\n        this.setState({\n          monthlist: monthlist\n        });\n      });\n    };\n  }\n\n  /**\n   * Methode rendert die Seite Month Review. \n   * Nachdem ein Monat über das Select Tag ausgewählt wurde, \n   * wird eine Liste mit allen Inputs des ausgewählten Monats gerendert.\n   * Ebenfalls wird das Startbudget und das am Ende übrig gebliebene Endbudget angezeigt.\n   */\n  render() {\n    return React.createElement(IonPage, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(IonHeader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(IonToolbar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(IonTitle, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, \"Month List\"))), React.createElement(IonContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, React.createElement(IonList, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, React.createElement(IonItem, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(IonLabel, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }), React.createElement(IonSelect, {\n      slot: \"start\",\n      multiple: false,\n      placeholder: \"Select Month\",\n      onIonChange: this.getMonthReview,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, this.props.monthObj.map(index => {\n      return React.createElement(IonSelectOption, {\n        key: index.month,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, index.month, \" \");\n    }))), React.createElement(IonList, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, this.state.monthlist.map(monthValues => {\n      if (monthValues.month === this.state.reviewedMonth.substr(0, 7)) {\n        return React.createElement(IonItem, {\n          key: monthValues.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 145\n          },\n          __self: this\n        }, React.createElement(IonLabel, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 146\n          },\n          __self: this\n        }, \"Startbudget: \", monthValues.startbudget), React.createElement(IonLabel, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 149\n          },\n          __self: this\n        }, \"Endbudget: \", this.state.endBudget));\n      }\n    })), React.createElement(IonList, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, this.state.inputs.map(index => {\n      if (index.month === this.state.reviewedMonth.substr(0, 7)) {\n        let out = \"\";\n\n        if (index.ausgabe) {\n          out = \"+ \";\n        } else {\n          out = \"- \";\n        }\n\n        return React.createElement(IonItem, {\n          key: index.inputs_id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 179\n          },\n          __self: this\n        }, React.createElement(IonGrid, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 180\n          },\n          __self: this\n        }, React.createElement(IonRow, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 181\n          },\n          __self: this\n        }, React.createElement(IonCol, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 182\n          },\n          __self: this\n        }, index.datum.substr(0, 10)), React.createElement(IonCol, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 183\n          },\n          __self: this\n        }, index.titel), React.createElement(IonCol, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 184\n          },\n          __self: this\n        }, out, index.betrag, \"\\u20AC\"))));\n      }\n    })))));\n  }\n\n}\n\nexport default MonthReview;","map":{"version":3,"sources":["/Users/benediktkeil/Softwareeng/Test080120/BK_ProjektSoftwareEng/src/pages/MonthReview.tsx"],"names":["React","IonContent","IonHeader","IonItem","IonLabel","IonList","IonPage","IonTitle","IonToolbar","IonSelect","IonSelectOption","IonGrid","IonRow","IonCol","useIndexedDB","MonthReview","Component","state","inputs","reviewedMonth","monthlist","endBudget","getMonthReview","event","setState","detail","value","getMonthInputs","getMonthValues","getAll","update","then","summeInputs","length","map","index","month","substr","ausgabe","betrag","actualBudget","startbudget","render","props","monthObj","monthValues","id","out","inputs_id","datum","titel"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { IonContent, IonHeader, IonItem, IonLabel, IonList, IonPage, IonTitle, IonToolbar, IonSelect, IonSelectOption, IonGrid, IonRow, IonCol } from '@ionic/react';\n\nimport { InputChangeEventDetail } from '@ionic/core';\nimport { useIndexedDB } from 'react-indexed-db';\n\n\n\n\n\ninterface IState {\n  reviewedMonth: string;\n  inputs: object[];\n  monthlist: object[];\n  endBudget: number;\n}\n\ninterface IProps {\n  monthObj: object[];\n  actualBudget: number;\n}\n\n\n/**\n * Klasse oder Komponente die alle bisher hinzugefügten Monate in einer Auswahl auflistet \n * und nach Auswahl eines Monats dessen kompletten Eingaben aufzeigt\n */\nclass MonthReview extends React.Component<IProps, IState> {\n  state: IState = {\n    inputs: [],\n    reviewedMonth: \"\",\n    monthlist: [],\n    endBudget: 0\n  }\n\n  /**\n   * Methode um ausgewählten Monat der Monatsauswahl zu speichern und\n   * Aufruf der Methodem getMonthInputs und getMonthValues\n   */\n  public getMonthReview = (event: CustomEvent<InputChangeEventDetail>) => {\n    this.setState({\n      reviewedMonth: event.detail.value!,\n    })\n    this.getMonthInputs();\n    this.getMonthValues();\n   \n  }\n\n  /**\n   * Methode um alle Inputs der Indexed DB abzurufen und in State inputs zu speichern.\n   * Auch wird hier der Endbetrag des ausgewählten Monats gesetzt \n   */\n  public getMonthInputs = () => {\n    const { getAll, update } = useIndexedDB('inputs');\n    getAll().then((inputs) => {\n\n      this.setState({\n        inputs: inputs,\n        summeInputs: 0,\n      })\n    }).then(() => {\n      if (this.state.inputs.length !== 0) {\n        this.state.inputs.map((index: any) => {\n          if (index.month === this.state.reviewedMonth.substr(0,7)) {\n            let summeInputs = this.state.summeInputs;\n            if (index.ausgabe) {\n              summeInputs -= index.betrag;\n\n              this.setState({\n                summeInputs: summeInputs,\n              })\n            } else {\n              summeInputs += index.betrag;\n\n              this.setState({\n                summeInputs: summeInputs,\n              })\n            }\n          }\n        })\n      }\n    }).then(() => {\n      let actualBudget = this.state.startbudget - this.state.summeInputs;\n      this.setState({\n        endBudget: actualBudget,\n      })\n    })\n  }\n\n  /**\n   * Methode um alle in der Indexed DB gespeicherten Werte des ObjectStores \"monthlist\" abzurufen \n   * und im State \"monthlist\" zu speichern\n   */\n  public getMonthValues = () => {\n    const { getAll } = useIndexedDB('monthlist');\n\n    getAll().then((monthlist) => {\n\n      this.setState({\n        monthlist: monthlist\n      })      \n    }) \n  }\n\n\n  /**\n   * Methode rendert die Seite Month Review. \n   * Nachdem ein Monat über das Select Tag ausgewählt wurde, \n   * wird eine Liste mit allen Inputs des ausgewählten Monats gerendert.\n   * Ebenfalls wird das Startbudget und das am Ende übrig gebliebene Endbudget angezeigt.\n   */\n  public render() {\n    \n    return (\n      <IonPage>\n        <IonHeader>\n          <IonToolbar>\n            <IonTitle>Month List</IonTitle>\n          </IonToolbar>\n        </IonHeader>\n        <IonContent>\n          <IonList>\n            <IonItem >\n              <IonLabel>\n\n              </IonLabel>\n              <IonSelect slot=\"start\" multiple={false} placeholder=\"Select Month\" onIonChange={this.getMonthReview}>\n                {\n                  this.props.monthObj.map((index: any) => {\n                    return (\n                      <IonSelectOption key={index.month}>{index.month} </IonSelectOption>\n                    )\n\n                  })\n                }\n\n              </IonSelect>\n            </IonItem>\n\n                <IonList>\n                {\n                this.state.monthlist.map((monthValues: any)=>{\n                    if(monthValues.month === this.state.reviewedMonth.substr(0,7)){\n                      return(\n                        <IonItem key={monthValues.id}>\n                        <IonLabel>\n                          Startbudget: {monthValues.startbudget}\n                        </IonLabel>\n                        <IonLabel>\n                        Endbudget: {this.state.endBudget}\n                        </IonLabel>  \n                        </IonItem>\n\n                        \n                      )\n                    }\n                }) } \n\n                </IonList>\n            \n\n            <IonList>\n             \n                {\n                this.state.inputs.map((index: any) => {\n\n                  if (index.month === this.state.reviewedMonth.substr(0,7)) {\n                      \n                    let out = \"\";\n                    if (index.ausgabe) {\n                      out = \"+ \"\n                    }\n                    else {\n                      out = \"- \"\n\n                    }\n                    \n                    return (\n                      <IonItem key={index.inputs_id}>\n                        <IonGrid>\n                          <IonRow >\n                            <IonCol>{index.datum.substr(0, 10)}</IonCol>\n                            <IonCol>{index.titel}</IonCol>\n                            <IonCol>\n                              {out}\n                              {index.betrag}€</IonCol>\n\n                          </IonRow>\n                        </IonGrid>\n                      </IonItem>\n                    )\n                  }\n                })\n              }\n            </IonList>\n            \n          </IonList>\n        </IonContent>\n      </IonPage>\n    );\n  }\n\n}\nexport default MonthReview;"]},"metadata":{},"sourceType":"module"}