{"version":3,"sources":["../node_modules/@ionic/core/dist/esm-es5 lazy /^/.//.*/.entry/.js$/ include: //.entry/.js$/ exclude: //.system/.entry/.js$/ groupOptions: {} namespace object","../node_modules/ionicons/dist/esm/legacy lazy /^/.//.*/.entry/.js$/ include: //.entry/.js$/ exclude: //.system/.entry/.js$/ groupOptions: {} namespace object","pages/NewMonth.tsx","pages/MonthReview.tsx","pages/NewInput.tsx","pages/ActualMonth.tsx","pages/Start.tsx","errors/starterror.tsx","App.tsx","db/DBConfig.tsx","serviceWorker.ts","index.tsx"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","keys","Object","module","exports","NewMonth","state","startbudget","month","className","src","alt","slot","color","icon","calendar","displayFormat","pickerFormat","mode","monthShortNames","min","max","placeholder","onIonChange","this","props","getMonth","cash","type","inputMode","getStartbudget","expand","routerLink","onClick","pushMonthObj","React","Component","MonthReview","inputs","reviewedMonth","monthlist","endBudget","summeInputs","getMonthReview","event","setState","detail","value","getMonthValues","getMonthInputs","useIndexedDB","getAll","update","index","substr","length","ausgabe","betrag","console","log","multiple","monthObj","key","monthValues","out","inputs_id","datum","titel","NewInput","issue","revenue","title","date","isSet","textInput","getType","getTitle","getValue","parseInt","getDate","add","added","actualbudget","budget","remove","text","disabled","saveInput","getActualBudget","ActualMonth","getInputsByIndex","deleteInput","deleteRecord","setAddedNew","onLoad","getActualMonth","forceUpdate","size","trash","Start","startRechner","StartError","alert","initDB","name","version","objectStoresMeta","store","storeConfig","keyPath","autoIncrement","storeSchema","keypath","options","unique","App","actualBudget","monthlistDB","allMonthObj","actualMonthObj","inputsSetNew","monthID","firstLoad","normalMode","starterror","monthsubstr","verifiyMonth","push","getMonthObj","firstLoadApp","getByID","Math","apply","actualMonth","getActualBudget2","startBudget","path","component","exact","render","to","tab","href","addCircle","addCircleOutline","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+IAAA,IAAIA,EAAM,CACT,2CAA4C,CAC3C,IACA,IAED,kCAAmC,CAClC,IACA,IAED,iCAAkC,CACjC,IACA,IAED,2BAA4B,CAC3B,IACA,IAED,0BAA2B,CAC1B,IACA,IAED,2BAA4B,CAC3B,IACA,IAED,0BAA2B,CAC1B,IACA,IAED,8BAA+B,CAC9B,IACA,IAED,6BAA8B,CAC7B,IACA,IAED,iCAAkC,CACjC,IACA,IAED,gCAAiC,CAChC,IACA,IAED,8BAA+B,CAC9B,IACA,IAED,6BAA8B,CAC7B,IACA,IAED,8BAA+B,CAC9B,IACA,IAED,6BAA8B,CAC7B,IACA,IAED,4BAA6B,CAC5B,IACA,IAED,2BAA4B,CAC3B,IACA,IAED,8BAA+B,CAC9B,IACA,IAED,6BAA8B,CAC7B,IACA,IAED,0BAA2B,CAC1B,IACA,IAED,yBAA0B,CACzB,IACA,IAED,uBAAwB,CACvB,IACA,IAED,gCAAiC,CAChC,IACA,IAED,+BAAgC,CAC/B,IACA,IAED,2BAA4B,CAC3B,IACA,IAED,0BAA2B,CAC1B,IACA,IAED,qBAAsB,CACrB,IACA,IAED,uCAAwC,CACvC,IACA,IAED,sCAAuC,CACtC,IACA,IAED,2BAA4B,CAC3B,IACA,IAED,0BAA2B,CAC1B,IACA,IAED,mCAAoC,CACnC,IACA,IAED,kCAAmC,CAClC,IACA,IAED,4BAA6B,CAC5B,IACA,IAED,2BAA4B,CAC3B,IACA,IAED,6BAA8B,CAC7B,IACA,IAED,4BAA6B,CAC5B,IACA,IAED,4BAA6B,CAC5B,IACA,IAED,2BAA4B,CAC3B,IACA,IAED,2BAA4B,CAC3B,IACA,IAED,0BAA2B,CAC1B,IACA,IAED,uBAAwB,CACvB,IACA,IAED,6BAA8B,CAC7B,IACA,IAED,4BAA6B,CAC5B,IACA,IAED,kCAAmC,CAClC,IACA,IAED,iCAAkC,CACjC,IACA,IAED,6BAA8B,CAC7B,IACA,IAED,4BAA6B,CAC5B,IACA,IAED,2BAA4B,CAC3B,IACA,IAED,0BAA2B,CAC1B,IACA,IAED,iCAAkC,CACjC,IACA,IAED,gCAAi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","file":"static/js/main.a5d91a0b.chunk.js","sourcesContent":["var map = {\n\t\"./ion-action-sheet-controller_8.entry.js\": [\n\t\t104,\n\t\t43\n\t],\n\t\"./ion-action-sheet-ios.entry.js\": [\n\t\t105,\n\t\t44\n\t],\n\t\"./ion-action-sheet-md.entry.js\": [\n\t\t106,\n\t\t45\n\t],\n\t\"./ion-alert-ios.entry.js\": [\n\t\t107,\n\t\t24\n\t],\n\t\"./ion-alert-md.entry.js\": [\n\t\t108,\n\t\t25\n\t],\n\t\"./ion-app_8-ios.entry.js\": [\n\t\t109,\n\t\t11\n\t],\n\t\"./ion-app_8-md.entry.js\": [\n\t\t110,\n\t\t12\n\t],\n\t\"./ion-avatar_3-ios.entry.js\": [\n\t\t111,\n\t\t46\n\t],\n\t\"./ion-avatar_3-md.entry.js\": [\n\t\t112,\n\t\t47\n\t],\n\t\"./ion-back-button-ios.entry.js\": [\n\t\t113,\n\t\t48\n\t],\n\t\"./ion-back-button-md.entry.js\": [\n\t\t114,\n\t\t49\n\t],\n\t\"./ion-backdrop-ios.entry.js\": [\n\t\t115,\n\t\t81\n\t],\n\t\"./ion-backdrop-md.entry.js\": [\n\t\t116,\n\t\t82\n\t],\n\t\"./ion-button_2-ios.entry.js\": [\n\t\t117,\n\t\t50\n\t],\n\t\"./ion-button_2-md.entry.js\": [\n\t\t118,\n\t\t51\n\t],\n\t\"./ion-card_5-ios.entry.js\": [\n\t\t119,\n\t\t52\n\t],\n\t\"./ion-card_5-md.entry.js\": [\n\t\t120,\n\t\t53\n\t],\n\t\"./ion-checkbox-ios.entry.js\": [\n\t\t121,\n\t\t54\n\t],\n\t\"./ion-checkbox-md.entry.js\": [\n\t\t122,\n\t\t55\n\t],\n\t\"./ion-chip-ios.entry.js\": [\n\t\t123,\n\t\t56\n\t],\n\t\"./ion-chip-md.entry.js\": [\n\t\t124,\n\t\t57\n\t],\n\t\"./ion-col_3.entry.js\": [\n\t\t125,\n\t\t83\n\t],\n\t\"./ion-datetime_3-ios.entry.js\": [\n\t\t126,\n\t\t20\n\t],\n\t\"./ion-datetime_3-md.entry.js\": [\n\t\t127,\n\t\t21\n\t],\n\t\"./ion-fab_3-ios.entry.js\": [\n\t\t128,\n\t\t58\n\t],\n\t\"./ion-fab_3-md.entry.js\": [\n\t\t129,\n\t\t59\n\t],\n\t\"./ion-img.entry.js\": [\n\t\t130,\n\t\t84\n\t],\n\t\"./ion-infinite-scroll_2-ios.entry.js\": [\n\t\t131,\n\t\t39\n\t],\n\t\"./ion-infinite-scroll_2-md.entry.js\": [\n\t\t132,\n\t\t40\n\t],\n\t\"./ion-input-ios.entry.js\": [\n\t\t133,\n\t\t60\n\t],\n\t\"./ion-input-md.entry.js\": [\n\t\t134,\n\t\t61\n\t],\n\t\"./ion-item-option_3-ios.entry.js\": [\n\t\t135,\n\t\t62\n\t],\n\t\"./ion-item-option_3-md.entry.js\": [\n\t\t136,\n\t\t63\n\t],\n\t\"./ion-item_8-ios.entry.js\": [\n\t\t137,\n\t\t64\n\t],\n\t\"./ion-item_8-md.entry.js\": [\n\t\t138,\n\t\t65\n\t],\n\t\"./ion-loading-ios.entry.js\": [\n\t\t139,\n\t\t26\n\t],\n\t\"./ion-loading-md.entry.js\": [\n\t\t140,\n\t\t27\n\t],\n\t\"./ion-menu_4-ios.entry.js\": [\n\t\t141,\n\t\t18\n\t],\n\t\"./ion-menu_4-md.entry.js\": [\n\t\t142,\n\t\t19\n\t],\n\t\"./ion-modal-ios.entry.js\": [\n\t\t143,\n\t\t14\n\t],\n\t\"./ion-modal-md.entry.js\": [\n\t\t144,\n\t\t15\n\t],\n\t\"./ion-nav_5.entry.js\": [\n\t\t145,\n\t\t13\n\t],\n\t\"./ion-popover-ios.entry.js\": [\n\t\t146,\n\t\t16\n\t],\n\t\"./ion-popover-md.entry.js\": [\n\t\t147,\n\t\t17\n\t],\n\t\"./ion-progress-bar-ios.entry.js\": [\n\t\t148,\n\t\t66\n\t],\n\t\"./ion-progress-bar-md.entry.js\": [\n\t\t149,\n\t\t67\n\t],\n\t\"./ion-radio_2-ios.entry.js\": [\n\t\t150,\n\t\t32\n\t],\n\t\"./ion-radio_2-md.entry.js\": [\n\t\t151,\n\t\t33\n\t],\n\t\"./ion-range-ios.entry.js\": [\n\t\t152,\n\t\t68\n\t],\n\t\"./ion-range-md.entry.js\": [\n\t\t153,\n\t\t69\n\t],\n\t\"./ion-refresher_2-ios.entry.js\": [\n\t\t154,\n\t\t41\n\t],\n\t\"./ion-refresher_2-md.entry.js\": [\n\t\t155,\n\t\t42\n\t],\n\t\"./ion-reorder_2-ios.entry.js\": [\n\t\t156,\n\t\t37\n\t],\n\t\"./ion-reorder_2-md.entry.js\": [\n\t\t157,\n\t\t38\n\t],\n\t\"./ion-ripple-effect.entry.js\": [\n\t\t158,\n\t\t85\n\t],\n\t\"./ion-route_4.entry.js\": [\n\t\t159,\n\t\t70\n\t],\n\t\"./ion-searchbar-ios.entry.js\": [\n\t\t160,\n\t\t28\n\t],\n\t\"./ion-searchbar-md.entry.js\": [\n\t\t161,\n\t\t29\n\t],\n\t\"./ion-segment_2-ios.entry.js\": [\n\t\t162,\n\t\t71\n\t],\n\t\"./ion-segment_2-md.entry.js\": [\n\t\t163,\n\t\t72\n\t],\n\t\"./ion-select_3-ios.entry.js\": [\n\t\t164,\n\t\t34\n\t],\n\t\"./ion-select_3-md.entry.js\": [\n\t\t165,\n\t\t35\n\t],\n\t\"./ion-slide_2-ios.entry.js\": [\n\t\t166,\n\t\t86\n\t],\n\t\"./ion-slide_2-md.entry.js\": [\n\t\t167,\n\t\t87\n\t],\n\t\"./ion-spinner.entry.js\": [\n\t\t168,\n\t\t73\n\t],\n\t\"./ion-split-pane-ios.entry.js\": [\n\t\t169,\n\t\t88\n\t],\n\t\"./ion-split-pane-md.entry.js\": [\n\t\t170,\n\t\t89\n\t],\n\t\"./ion-tab-bar_2-ios.entry.js\": [\n\t\t171,\n\t\t74\n\t],\n\t\"./ion-tab-bar_2-md.entry.js\": [\n\t\t172,\n\t\t75\n\t],\n\t\"./ion-tab_2.entry.js\": [\n\t\t173,\n\t\t36\n\t],\n\t\"./ion-text.entry.js\": [\n\t\t174,\n\t\t76\n\t],\n\t\"./ion-textarea-ios.entry.js\": [\n\t\t175,\n\t\t77\n\t],\n\t\"./ion-textarea-md.entry.js\": [\n\t\t176,\n\t\t78\n\t],\n\t\"./ion-toast-ios.entry.js\": [\n\t\t177,\n\t\t30\n\t],\n\t\"./ion-toast-md.entry.js\": [\n\t\t178,\n\t\t31\n\t],\n\t\"./ion-toggle-ios.entry.js\": [\n\t\t179,\n\t\t22\n\t],\n\t\"./ion-toggle-md.entry.js\": [\n\t\t180,\n\t\t23\n\t],\n\t\"./ion-virtual-scroll.entry.js\": [\n\t\t181,\n\t\t90\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 80;\nmodule.exports = webpackAsyncContext;","var map = {\n\t\"./ion-icon.entry.js\": [\n\t\t185,\n\t\t98\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 81;\nmodule.exports = webpackAsyncContext;","import {\n  IonCard,\n  IonCardContent,\n  IonCardHeader,\n  IonCardSubtitle,\n  IonCardTitle,\n  IonContent,\n  IonHeader,\n  IonIcon,\n  IonItem,\n  IonLabel,\n \n  IonPage,\n  IonTitle,\n  IonToolbar,\n  IonInput,\n  IonDatetime,\n  IonButton,\n  \n} from '@ionic/react';\nimport {calendar, cash } from 'ionicons/icons';\nimport React from 'react';\nimport './Tab1.css';\nimport { DatetimeChangeEventDetail, InputChangeEventDetail } from '@ionic/core';\n\n/**\n * Klasse bzw Komponente um die Seite der Monats Eingabe darzustellen\n * Erhällt Methoden (getMonth, getStartbudget, pushMonthObj) von App Komponente als Props\n */\ninterface IState {\nmonth: string;\nstartbudget: string;\n}\n\ninterface IProps {\n  getMonth: (event: CustomEvent<DatetimeChangeEventDetail>)=>void;\n  getStartbudget: (event: CustomEvent<InputChangeEventDetail>)=>void;\n  pushMonthObj: ()=>void;\n  month: string;\n  startbudget:number;\n}\n\nclass NewMonth extends React.Component<IProps, IState>  {\nstate: IState ={\n  startbudget: \"\",\n  month: \"test\"\n}\n\n\n\n  public render(){\n   \n\n  return (\n    <IonPage>\n      <IonHeader>\n        <IonToolbar>\n          <IonTitle>New Month</IonTitle>\n        </IonToolbar>\n      </IonHeader>\n      <IonContent>\n        <div className=\"welcome\">\n        <IonCard className=\"welcome-card\">\n          <img src=\"/assets/money.jpg\" alt=\"\" />\n         \n          <IonCardContent>\n            <p>\n              Starten Sie einen neuen Monat, der aktuelle Monat wird dadurch abgeschlossen.</p>\n              Eine Übersicht über alle begonnen Monate finden Sie bei \"Month Review\".\n            \n          </IonCardContent>\n        </IonCard>\n        </div>\n\n       \n        \n            \n          \n          <IonItem >\n            <IonIcon slot=\"start\" color=\"medium\" icon={calendar} />\n            <IonDatetime displayFormat=\"MMMM YY\" pickerFormat=\"MMMM YY\" mode=\"md\" monthShortNames=\"jan, feb, mar, apr, mai, jun, jul, aug, sep, okt, nov, des\"   min=\"2019-01\" max=\"2030-12\" placeholder=\"Select Month\" onIonChange={this.props.getMonth} ></IonDatetime>\n          </IonItem>\n          <IonItem>\n            <IonIcon slot=\"start\" color=\"medium\" icon={cash} />\n            <IonInput type=\"number\" placeholder=\"Select Startbudget\"  inputMode=\"numeric\" onIonChange={this.props.getStartbudget}></IonInput>\n            </IonItem>\n        \n            <IonButton color=\"secondary\" expand=\"block\" routerLink=\"/newInput\"  onClick={this.props.pushMonthObj}>Start Month</IonButton>\n          \n        \n      </IonContent>\n    </IonPage>\n  );\n};\n}\nexport default NewMonth;\n","import React from 'react';\nimport { IonContent, IonHeader, IonItem, IonLabel, IonList, IonPage, IonTitle, IonToolbar, IonSelect, IonSelectOption, IonGrid, IonRow, IonCol } from '@ionic/react';\n\nimport { InputChangeEventDetail } from '@ionic/core';\nimport { useIndexedDB } from 'react-indexed-db';\n\n\n\n\n\ninterface IState {\n  reviewedMonth: string;\n  inputs: object[];\n  monthlist: object[];\n  endBudget: number;\n  summeInputs: number;\n  startbudget: number;\n}\n\ninterface IProps {\n  monthObj: object[];\n  actualBudget: number;\n}\n\n\n/**\n * Klasse oder Komponente die alle bisher hinzugefügten Monate in einer Auswahl auflistet \n * und nach Auswahl eines Monats dessen kompletten Eingaben aufzeigt\n */\nclass MonthReview extends React.Component<IProps, IState> {\n  state: IState = {\n    inputs: [],\n    reviewedMonth: \"\",\n    monthlist: [],\n    endBudget: 0,\n    summeInputs: 0,\n    startbudget: 0,\n  }\n\n  /**\n   * Methode um ausgewählten Monat der Monatsauswahl zu speichern und\n   * Aufruf der Methodem getMonthInputs und getMonthValues\n   */\n  public getMonthReview = (event: CustomEvent<InputChangeEventDetail>) => {\n    this.setState({\n      reviewedMonth: event.detail.value!,\n    })\n\n    this.getMonthValues();\n    this.getMonthInputs();\n\n  }\n\n  /**\n   * Methode um alle Inputs der Indexed DB abzurufen und in State inputs zu speichern.\n   * Auch wird hier der Endbetrag des ausgewählten Monats gesetzt \n   */\n  public getMonthInputs = () => {\n\n\n    const { getAll, update } = useIndexedDB('inputs');\n    getAll().then((inputs) => {\n\n\n      this.state.monthlist.map((index: any) => {\n        if (index.month === this.state.reviewedMonth.substr(0, 7)) {\n          this.setState({\n            startbudget: index.startbudget\n          })\n        }\n      })\n\n      this.setState({\n        inputs: inputs,\n        summeInputs: 0,\n      })\n    }).then(() => {\n      if (this.state.inputs.length !== 0) {\n        this.state.inputs.map((index: any) => {\n          if (index.month === this.state.reviewedMonth.substr(0, 7)) {\n            let summeInputs = this.state.summeInputs;\n\n            if (index.ausgabe) {\n              summeInputs -= index.betrag;\n\n              this.setState({\n                summeInputs: summeInputs,\n              })\n            } else {\n              summeInputs += index.betrag;\n\n              this.setState({\n                summeInputs: summeInputs,\n              })\n            }\n          }\n        })\n      }\n    }).then(() => {\n      console.log(\"startbudget: \" + this.state.startbudget)\n      let endBudget = this.state.startbudget - this.state.summeInputs;\n      this.setState({\n        endBudget: endBudget,\n      })\n    })\n  }\n\n  /**\n   * Methode um alle in der Indexed DB gespeicherten Werte des ObjectStores \"monthlist\" abzurufen \n   * und im State \"monthlist\" zu speichern\n   */\n  public getMonthValues = () => {\n    const { getAll } = useIndexedDB('monthlist');\n\n    getAll().then((monthlist) => {\n\n      this.setState({\n        monthlist: monthlist\n      })\n\n    })\n  }\n\n\n  /**\n   * Methode rendert die Seite Month Review. \n   * Nachdem ein Monat über das Select Tag ausgewählt wurde, \n   * wird eine Liste mit allen Inputs des ausgewählten Monats gerendert.\n   * Ebenfalls wird das Startbudget und das am Ende übrig gebliebene Endbudget angezeigt.\n   */\n  public render() {\n\n    return (\n      <IonPage>\n        <IonHeader>\n          <IonToolbar>\n            <IonTitle>Month List</IonTitle>\n          </IonToolbar>\n        </IonHeader>\n        <IonContent>\n          <IonList>\n            <IonItem >\n              <IonLabel>\n\n              </IonLabel>\n              <IonSelect slot=\"start\" multiple={false} placeholder=\"Select Month\" onIonChange={this.getMonthReview}>\n                {\n                  this.props.monthObj.map((index: any) => {\n                    return (\n                      <IonSelectOption key={index.month}>{index.month} </IonSelectOption>\n                    )\n\n                  })\n                }\n\n              </IonSelect>\n            </IonItem>\n\n            <IonList>\n              {\n                this.state.monthlist.map((monthValues: any) => {\n                  if (monthValues.month === this.state.reviewedMonth.substr(0, 7)) {\n\n                    return (\n                      <IonItem key={monthValues.id}>\n                        <IonLabel>\n                          Startbudget: {this.state.startbudget}\n                        </IonLabel>\n                        <IonLabel>\n                          Endbudget: {this.state.endBudget}\n                        </IonLabel>\n                      </IonItem>\n\n\n                    )\n                  }\n                })}\n\n            </IonList>\n\n\n            <IonList>\n\n              {\n                this.state.inputs.map((index: any) => {\n\n                  if (index.month === this.state.reviewedMonth.substr(0, 7)) {\n\n                    let out = \"\";\n                    if (index.ausgabe) {\n                      out = \"+ \"\n                    }\n                    else {\n                      out = \"- \"\n\n                    }\n\n                    return (\n                      <IonItem key={index.inputs_id}>\n                        <IonGrid>\n                          <IonRow >\n                            <IonCol>{index.datum.substr(0, 10)}</IonCol>\n                            <IonCol>{index.titel}</IonCol>\n                            <IonCol>\n                              {out}\n                              {index.betrag}€</IonCol>\n\n                          </IonRow>\n                        </IonGrid>\n                      </IonItem>\n                    )\n                  }\n                })\n              }\n            </IonList>\n\n          </IonList>\n        </IonContent>\n      </IonPage>\n    );\n  }\n\n}\nexport default MonthReview;","import React from 'react';\nimport { IonHeader, IonToolbar, IonPage, IonTitle, IonContent, IonItem, IonInput, IonIcon, IonLabel, IonSelect, IonSelectOption, IonDatetime, IonButton, IonCard, IonCardContent } from '@ionic/react';\nimport { cash, add, remove, text, calendar } from 'ionicons/icons';\nimport { DatetimeChangeEventDetail, InputChangeEventDetail } from '@ionic/core';\nimport { useIndexedDB } from 'react-indexed-db';\n\n\ninterface IState{\nissue?: boolean;\nrevenue?: boolean;\ntitle?: string;\nvalue?: number;\ndate?: string;\nisSet?: boolean;\n\n}\n\ninterface IProps {\n  month:string;\n  budget: number;\n  getActualBudget: ()=> void; \n\n}\n\n/**\n * Klasse bzw Komponente um neue Input Einträge für den aktuellen Monat zu erstellen\n */\nclass NewInput extends React.Component<IProps, IState> {\n  state: IState ={\n    issue: false,\n    revenue: false,\n    title: \"\",\n    value: 0,\n    date: \"\",\n    isSet: false\n\n  }\n  textInput = \"\";\n\n  \n    /**\n     * Methode um den Typ des Input Eintrags zu erhalten. \n     * Ein Input kann entweder Einnahme oder Ausgabe sein.\n     *   \n     */\n    public getType = (event: CustomEvent<InputChangeEventDetail>) => {\n    \n      if (event.detail.value===\"Issue (-)\"){\n        this.setState({\n          issue: true ,\n          revenue: false,\n          isSet: true,\n        })\n      }\n      else if (event.detail.value===\"Revenue (+)\"){\n        this.setState({\n          issue: false ,\n          revenue: true,\n          isSet: true\n        })\n      }\n    }\n    \n    /**\n     * Methode um den Title eines Eintrags zu erhalten und diesen in den State title zu speichern\n     */\n    public getTitle = (event: CustomEvent<InputChangeEventDetail>) => {\n      this.setState({\n        title: event.detail.value! ,\n      })\n    }\n\n    /**\n     * Methode um den Geldwert eines Eintrags zu erhalten und diesen in den State value zu speichern\n     */\n    public getValue = (event: CustomEvent<InputChangeEventDetail>) => {\n     this.setState({\n        value: parseInt(event.detail.value!) ,\n      })  \n    }\n\n    /**\n     * Methode um das Datum eines Eintrags zu erhalten und diesen in den state date zu speichern.\n     */\n    public getDate = (event: CustomEvent<DatetimeChangeEventDetail>) => {\n      let date = event.detail.value;\n      \n      \n      this.setState({\n        date: date!,\n    \n      });     \n    }\n\n    /**\n     * Methode um alle Eingaben des Eintrags in der Indexed DB zu speichern. \n     * Diese Methode wird bei Betätigung des Buttons \"Add Input\" ausgeführt.\n     */\n    public saveInput(){\n      const {add} = useIndexedDB('inputs');\n      add({ausgabe: this.state.revenue, titel: this.state.title, betrag: this.state.value, datum: this.state.date, month: this.props.month, added: false, actualbudget: this.props.budget});\n      \n    }\n\n    \n  \n\n    /**\n     * Methode um den Inhalt der Seite \"New Input\" zu rendern. \n     * Stellt die Select/Input Tags dar und gibt den Button bei vollständigen Eintrag \n     * der einzelnen Felder zum Betätigen frei.\n     */\n    public render(){\n      \n    return (\n    <IonPage>\n      <IonHeader>\n        <IonToolbar>\n          <IonTitle>New Input</IonTitle>\n        </IonToolbar>\n      </IonHeader>\n      <IonContent>\n      <IonCard className=\"welcome-card\">\n          <img src=\"/assets/money.jpg\" alt=\"\" />\n         \n          <IonCardContent>\n            <p>\n              Fügen Sie einen neuen Input hinzu.</p>\n              Eine Übersicht über alle Inputs des aktuellen Monats, sowie das aktuelle Budget finden Sie bei \"Actual Month\".\n            \n          </IonCardContent>\n        </IonCard>\n        <IonItem>\n      <IonLabel>\n      Actual Month: {this.props.month}\n      </IonLabel>\n      </IonItem>\n      <IonItem>\n      <IonLabel>\n      Actual Budget: {this.props.budget}\n      </IonLabel>\n      </IonItem>\n      <IonItem>\n            <IonIcon slot=\"start\" color=\"medium\" icon={add} />\n            <IonIcon slot=\"start\" color=\"medium\" icon={remove} />\n            <IonSelect title=\"Input/Output\" onIonChange={this.getType}>\n              <IonSelectOption>Revenue (+)</IonSelectOption>\n              <IonSelectOption>Issue (-)</IonSelectOption>\n            </IonSelect>\n            </IonItem>\n\n            <IonItem>\n            <IonIcon slot=\"start\" color=\"medium\" icon={text} />\n            <IonInput type=\"text\" placeholder=\"Title\" onIonChange={this.getTitle} ></IonInput>\n            </IonItem>\n\n      <IonItem>\n            <IonIcon slot=\"start\" color=\"medium\" icon={cash} />\n            <IonInput type=\"number\" placeholder=\"Select Value\"  inputMode=\"numeric\" onIonChange={this.getValue} ></IonInput>\n            </IonItem>\n\n            <IonItem >\n            <IonIcon slot=\"start\" color=\"medium\" icon={calendar} />\n            <IonDatetime displayFormat=\"DD MMMM YY\" pickerFormat=\"DD MMMM YY\" mode=\"md\"  min={this.props.month} max={this.props.month} placeholder=\"Select Date\" onIonChange={this.getDate} ></IonDatetime>\n          </IonItem>\n          <IonButton color=\"secondary\" expand=\"block\" routerLink=\"/actualMonth\" disabled={this.state.isSet == false !|| this.state.title == \"\" !|| this.state.value == 0 !|| this.state.date == \"\"} onClick={()=>{this.saveInput(); this.props.getActualBudget(); }}>Add Input</IonButton>\n\n       </IonContent> \n    </IonPage>\n    );\n   }\n};\n\nexport default NewInput;\n","import React from 'react';\nimport { IonContent, IonHeader, IonItem, IonLabel, IonList, IonPage, IonTitle, IonToolbar, IonRow, IonCol, IonGrid, IonIcon, IonButton} from '@ionic/react';\n\n\nimport {useIndexedDB} from 'react-indexed-db';\nimport { trash } from 'ionicons/icons';\n\n\n\n  \n\n\n  interface IState {\n    inputs: object[];\n  }\n  \n  interface IProps {\n  month: string;\n  budget: number;\n  getActualBudget: ()=> void; \n  getActualMonth: ()=> void; \n  setAddedNew: ()=> void;\n  }\n\n\n  /**\n   * Klasse oder Komponente die den Aktuellen Monat mit allen zugehörigen Inputs anzeigt\n   */\nclass ActualMonth extends React.Component<IProps, IState> {\n  state: IState ={\n    inputs: []\n  }\n \n\n  /**\n   * Methode um alle Inputs aus der Indexed DB abzurufen\n   */\n  public getInputsByIndex= ()=> {\n      const {getAll} = useIndexedDB('inputs');\n\n      getAll().then((inputs) =>{\n  \n        this.setState({\n         inputs: inputs\n       })\n      })\n  } \n \n  public deleteInput = (id: number)=>{\n      const {deleteRecord} = useIndexedDB('inputs');\n      deleteRecord(id).then( ()=>{\n        \n        this.props.setAddedNew();\n      })\n\n  }\n\n  \n\n  /**\n   * Diese Methode rendert die Seite Actual Month. \n   * Hier wird der aktuelle Monat mit dem aktuellen Budget angezeigt. \n   * Mit Hilfe einer Map Funktion werden alle Inputs, die dem aktuellen Monat zugehören, aufgelistet. \n   * Es wird jeder Input nach Art (Einnahme und Ausgabe) überprüft und mit entsprechenden Symbol (+ oder -) versehen.\n   */ \n  public render(){\n \n    this.getInputsByIndex();\n   \n  return (\n    <IonPage onLoad={()=>{this.props.getActualMonth() ;this.props.getActualBudget();this.forceUpdate();}}>\n      <IonHeader>\n        <IonToolbar>\n          <IonTitle>Actual Month</IonTitle>\n        </IonToolbar>\n      </IonHeader>\n      <IonContent>\n        <IonList>\n          <IonItem >\n            \n\n            <IonLabel>\n      Actual Month: {this.props.month.substr(0,7)}\n      </IonLabel>\n      </IonItem>\n     \n      <IonItem>\n\n      <IonLabel>\n      Actual Budget: {this.props.budget}\n      </IonLabel>\n          </IonItem>\n\n          <br></br>\n          <IonList>\n            <IonItem>\n              <IonGrid>\n                <IonRow>\n                  <IonCol>\n                    Date\n                  </IonCol>\n                  <IonCol>\n                    Title\n                  </IonCol>\n                  <IonCol>\n                    Value\n                  </IonCol>\n                  <IonCol size=\"2\">\n                    \n                  </IonCol>\n                </IonRow>\n              </IonGrid>\n              </IonItem>\n            {\n              /**\n               * Methode um alle Inputs aufzulisten die dem Aktuellen Monat zugehören.\n               * Es wird jeder Input nach Art (Einnahme und Ausgabe) überprüft und mit entsprechenden Symbol (+ oder -) versehen\n               */\n            this.state.inputs.map((index: any)=>{\n              \n              if(index.month===this.props.month.substr(0,7)){\n                \n              let out = \"\";\n                if (index.ausgabe){\n                  out= \"+ \"\n                  }\n                  else{\n                    out= \"- \"\n                    \n                  }\n\n              return (\n                <IonItem key={index.inputs_id}>\n                  <IonGrid>\n                <IonRow >\n                <IonCol>{index.datum.substr(0,10)}</IonCol>\n            <IonCol>{index.titel}</IonCol> \n              <IonCol>\n               {out}\n                {index.betrag}€</IonCol>\n              <IonCol size=\"2\"><IonButton onClick={()=>{this.deleteInput(index.inputs_id);}}><IonIcon icon={trash}></IonIcon></IonButton></IonCol>\n            </IonRow>\n            </IonGrid>\n            </IonItem>\n              )}\n            })\n          }\n          </IonList>\n         \n        </IonList>\n      \n  \n      </IonContent>\n    </IonPage>\n  );\n}\n\n}\nexport default ActualMonth;","import {\n    IonCard,\n    IonCardContent,\n    IonCardHeader,\n    IonCardSubtitle,\n    IonCardTitle,\n    IonContent,\n    IonHeader,\n    IonIcon,\n    IonItem,\n   \n    IonPage,\n    IonTitle,\n    IonToolbar,\n    IonInput,\n    IonDatetime,\n    IonButton,\n\n  } from '@ionic/react';\n  import {calendar, cash } from 'ionicons/icons';\n  import React from 'react';\n  import './Tab1.css';\n  import { DatetimeChangeEventDetail, InputChangeEventDetail } from '@ionic/core';\n  \n  /**\n   * Klasse bzw Komponente um die Seite der Monats Eingabe darzustellen\n   * Erhällt Methoden (getMonth, getStartbudget, pushMonthObj) von App Komponente als Props\n   */\n  interface IState {\n\n  }\n  \n  interface IProps {\n    getMonth: (event: CustomEvent<DatetimeChangeEventDetail>)=>void;\n    getStartbudget: (event: CustomEvent<InputChangeEventDetail>)=>void;\n    startRechner: ()=>void;\n    month: string;\n    startbudget: number;\n  \n  }\n  \n  class Start extends React.Component<IProps, IState>  {\n  state: IState ={\n  \n  }\n  \n  \n  \n    public render(){\n     \n  \n    return (\n      <IonPage>\n        <IonHeader>\n          <IonToolbar>\n            <IonTitle>Start Ausgabenrechner</IonTitle>\n          </IonToolbar>\n        </IonHeader>\n        <IonContent>\n          <div className=\"welcome\">\n          <IonCard className=\"welcome-card\">\n            <img src=\"/assets/money.jpg\" alt=\"\" />\n            <IonCardHeader>\n              <IonCardSubtitle>Get Started</IonCardSubtitle>\n              <IonCardTitle>Mein Ausgabenrechner</IonCardTitle>\n            </IonCardHeader>\n            <IonCardContent>\n                \n              <p>   \n                Starten Sie den Ausgabenrechner indem Sie Ihren ersten Monat auswählen! \n              </p>\n            </IonCardContent>\n          </IonCard>\n          </div>\n          <IonItem >\n            <IonIcon slot=\"start\" color=\"medium\" icon={calendar} />\n            <IonDatetime displayFormat=\"MMMM YY\" pickerFormat=\"MMMM YY\" mode=\"md\" monthShortNames=\"jan, feb, mar, apr, mai, jun, jul, aug, sep, okt, nov, des\"   min=\"2019-01\" max=\"2030-12\" placeholder=\"Select Month\" onIonChange={this.props.getMonth} ></IonDatetime>\n          </IonItem>\n          <IonItem>\n            <IonIcon slot=\"start\" color=\"medium\" icon={cash} />\n            <IonInput type=\"number\" placeholder=\"Select Startbudget\"  inputMode=\"numeric\" onIonChange={this.props.getStartbudget}></IonInput>\n            </IonItem>\n         \n          \n          \n              <IonButton color=\"secondary\" expand=\"block\"  onClick={this.props.startRechner} disabled={this.props.month === \"test\" !|| this.props.startbudget === 0}>Start Ausgabenrechner</IonButton>\n            \n          \n        </IonContent>\n      </IonPage>\n    );\n  };\n  }\n  export default Start;\n  ","import {\n    IonCard,\n    IonCardContent,\n    IonCardHeader,\n    IonCardSubtitle,\n    IonCardTitle,\n    IonContent,\n    IonHeader,\n    IonIcon,\n    IonItem,\n   \n    IonPage,\n    IonTitle,\n    IonToolbar,\n    IonInput,\n    IonDatetime,\n    IonButton,\n\n  } from '@ionic/react';\n  import {calendar, cash, alert } from 'ionicons/icons';\n  import React from 'react';\n\n  \n  \n  /**\n   * Klasse bzw Komponente um die Seite der Monats Eingabe darzustellen\n   * Erhällt Methoden (getMonth, getStartbudget, pushMonthObj) von App Komponente als Props\n   */\n  interface IState {\n\n  }\n  \n  interface IProps {\n    \n  \n  }\n  \n  class StartError extends React.Component<IProps, IState>  {\n  state: IState ={\n  \n  }\n  \n  \n  \n    public render(){\n     \n  \n    return (\n      \n       \n        <IonContent>\n          <IonCard>\n              <IonCardContent>\n              <IonIcon icon={alert} size=\"large\" color=\"ff0000\" ></IonIcon>\n                  <IonItem>\n                      Error! <br></br> Der Monat ist schon vorhanden! <br></br>Bitte einen anderen auswählen.\n                  </IonItem>\n                  <IonButton color=\"secondary\" expand=\"block\" routerLink=\"/newMonth\">Neuer Versuch</IonButton>\n              </IonCardContent>\n          </IonCard>\n        </IonContent>\n      \n    );\n  };\n  }\n  export default StartError;\n  ","import React from 'react';\nimport { Redirect, Route } from 'react-router-dom';\nimport {\n  IonApp,\n  IonIcon,\n  IonLabel,\n  IonRouterOutlet,\n  IonTabBar,\n  IonTabButton,\n  IonTabs\n} from '@ionic/react';\nimport { IonReactRouter } from '@ionic/react-router';\nimport { addCircleOutline, calendar, addCircle } from 'ionicons/icons';\nimport NewMonth from './pages/NewMonth';\nimport MonthReview from './pages/MonthReview';\nimport NewInput from './pages/NewInput';\nimport ActualMonth from './pages/ActualMonth';\nimport Start from './pages/Start';\nimport StartError from './errors/starterror';\n\n/* Core CSS required for Ionic components to work properly */\nimport '@ionic/react/css/core.css';\n\n/* Basic CSS for apps built with Ionic */\nimport '@ionic/react/css/normalize.css';\nimport '@ionic/react/css/structure.css';\nimport '@ionic/react/css/typography.css';\n\n/* Optional CSS utils that can be commented out */\nimport '@ionic/react/css/padding.css';\nimport '@ionic/react/css/float-elements.css';\nimport '@ionic/react/css/text-alignment.css';\nimport '@ionic/react/css/text-transformation.css';\nimport '@ionic/react/css/flex-utils.css';\nimport '@ionic/react/css/display.css';\n\n/* Theme variables */\nimport './theme/variables.css';\n\nimport { DatetimeChangeEventDetail, InputChangeEventDetail } from '@ionic/core';\nimport { DBConfig } from './db/DBConfig';\n\n\nimport { initDB, useIndexedDB } from 'react-indexed-db';\n\n\ninitDB(DBConfig);\n\n\n\ninterface IState {\n  month: string;\n  startbudget: number;\n  monthObj: object[];\n  monthlist?: object[];\n  monthlistDB: object[];\n  actualMonth?: string;\n  actualBudget: number;\n  allMonthObj: object[];\n  actualMonthObj: actualMonthObj;\n  inputs: object[];\n  inputsSetNew: object[];\n  monthID: number;\n  firstLoad: boolean;\n  normalMode: boolean;\n  starterror: boolean;\n  summeInputs: number;\n}\ninterface IProps {\n\n}\n\ninterface actualMonthObj {\n  month: string;\n  startbudget: number;\n  actualbudget: number;\n  id: number;\n}\n\n/**\n * \n * Documentation Projekt Softwareengineering\n * Es wurde ein Ausgabenrechner implementiert, \n * der eine Übersicht über das aktuelle Budget und alle Ausgaben/Einnahmen eines Monats gibt\n * @author: Benedikt Keil\n * @version: V2.1\n * \n */\nclass App extends React.Component<IProps, IState>{\n  state: IState = {\n    actualBudget: 0,\n    startbudget: 0,\n    month: \"test\",\n    monthObj: [{ \"month\": \"Test\", \"startbudget\": 0 }],\n    monthlistDB: [],\n    allMonthObj: [{ \"month\": \"no Month\", \"startbudget\": 0, \"id\": 1 }],\n    actualMonthObj: { month: \"no Month\", startbudget: 0, actualbudget: 0, id: 0 },\n    inputs: [],\n    inputsSetNew: [],\n    monthID: 1,\n    firstLoad: true,\n    normalMode: false,\n    starterror: false,\n    summeInputs: 0,\n  }\n\n\n  /**\n * Methode um ausgewählten Monat zu speichern\n */\n  public getMonth = (event: CustomEvent<DatetimeChangeEventDetail>) => {\n    let month = event.detail.value;\n    let monthsubstr = month!.substr(0, 7);\n\n\n    this.setState({\n      month: monthsubstr!,\n\n    });\n\n    console.log(this.state.month);\n    this.verifiyMonth();\n  }\n  /**\n  * Methode um eingegebenes Startbudget zu speichern\n  */\n  public getStartbudget = (event: CustomEvent<InputChangeEventDetail>) => {\n    this.setState({\n      startbudget: parseInt(event.detail.value!),\n\n    })\n    console.log(this.state.startbudget);\n\n\n  }\n  /**\n   * Methode um Eingaben über Monat und Startbudget in Indexed DB zu speichern \n   * und um alle gespeicherten Monate in Indexed DB als State (monthlistDB) zu speichern.\n   * Aufruf der Methode getActualMonth um aktuellen Monat in App zu setzen.\n   */\n  public pushMonthObj = () => {\n\n    this.state.monthObj.push({ \"month\": this.state.month, \"startbudget\": this.state.startbudget })\n    this.forceUpdate();\n    const { add, getAll } = useIndexedDB('monthlist');\n\n\n    add({ month: this.state.month, startbudget: this.state.startbudget, actualbudget: this.state.startbudget })\n\n\n\n    getAll().then((monthlistDB) => {\n      this.setState({\n        monthlistDB: monthlistDB\n      })\n    })\n    this.getActualMonth();\n  }\n\n  /**\n   * Methode um alle gespeicherten Monate in Indexed DB abzurufen\n   * und im State monthlistDB zu speichern\n   */\n  public getMonthObj = () => {\n    const { getAll } = useIndexedDB('monthlist');\n    getAll().then((monthlistDB) => {\n      this.setState({\n        monthlistDB: monthlistDB\n      })\n    })\n  }\n\n  /**\n   * Methode um Startseite beim aller ersten Start der App zu starten.\n   * Die Seite wird benötigt um einen ersten Datenbank Eintrag zu generieren.\n   */\n  public firstLoadApp = () => {\n    const { getAll } = useIndexedDB('monthlist');\n    getAll().then((month) => {\n\n      if (month.length === 0) {\n        this.setState({\n          firstLoad: true,\n        })\n      }\n      else {\n        this.setState({\n          firstLoad: false,\n          normalMode: true,\n        })\n        this.getActualMonth();\n      }\n    })\n    console.log(this.state.month + this.state.startbudget);\n  }\n\n\n  /**\n   * Methode erstellt nach betätigen des \"Start Ausgabenrechner\" Buttons den ersten Datenbankeintrag in dem objectStore \"monthlist\"\n   */\n  public startRechner = () => {\n\n    const { add, getAll } = useIndexedDB('monthlist');\n    if (this.state.month !== \"test\" && this.state.startbudget !== 0) {\n      add({ month: this.state.month, startbudget: this.state.startbudget, actualbudget: this.state.startbudget });\n      getAll().then((month) => {\n\n        if (month.length === 0) {\n          add({ month: this.state.month, startbudget: this.state.startbudget, actualbudget: this.state.startbudget });\n        }\n        getAll().then((month) => {\n\n\n          this.setState({\n            allMonthObj: month,\n            firstLoad: false,\n            normalMode: true,\n          })\n\n          this.getActualMonth();\n        })\n      })\n    }\n    else {\n      this.setState({\n        starterror: true,\n      })\n    }\n  }\n\n\n  /**\n   * Methode um aktuellen Monat (letzter hinzugefügter Monat) abzurufen\n   * und speichern der Werte dieses Monats als State (month, startbudget, actualbudget).\n   * Aufruf der Methode getActualBudget um aktuelles Budget abzurufen, wenn sich der Monat ändert.\n   */\n  public getActualMonth = () => {\n\n    const { getAll, getByID } = useIndexedDB('monthlist');\n    getAll().then((month) => {\n\n\n      this.setState({\n        allMonthObj: month\n      })\n    }).then(() => {\n      getByID(Math.max.apply(Math, this.state.allMonthObj.map((o: any) => { this.setState({ monthID: o.id }); return o.id }))).then((actualMonth) => {\n        console.log(actualMonth);\n\n        this.setState({\n          actualMonthObj: actualMonth,\n        })\n        this.setState({\n          month: this.state.actualMonthObj.month,\n          startbudget: this.state.actualMonthObj.startbudget,\n          actualBudget: this.state.actualMonthObj.actualbudget,\n        })\n        this.forceUpdate();\n        console.log(this.state.actualBudget)\n        this.getActualBudget2();\n\n\n      })\n    })\n\n  }\n\n\n\n  /**\n   * Methode um aktuelles Budget aller Inputs des aktuellen Monats zu berechnen.\n   * Speichert den Wert in State (aktualBudget) \n   */\n  public getActualBudget = () => {\n\n    const { getAll, update } = useIndexedDB('inputs');\n\n    getAll().then((inputs) => {\n\n      this.setState({\n        inputs: inputs\n      })\n    }).then(() => {\n\n      if (this.state.inputs.length !== 0) {\n\n        this.state.inputs.map((index: any) => {\n          if (index.month === this.state.month && index.added === true) {\n            let actualBudget = index.actualbudget;\n            this.setState({\n              actualBudget: actualBudget,\n            })\n          }\n          if (index.month === this.state.month && index.added === false) {\n            if (this.state.actualBudget === this.state.startbudget) {\n              console.log(\"start === actual\");\n              let startBudget = this.state.startbudget;\n              if (index.ausgabe) {\n\n                startBudget += index.betrag;\n                this.setState({\n                  actualBudget: startBudget,\n                })\n                update({ inputs_id: index.inputs_id, betrag: index.betrag, ausgabe: index.ausgabe, titel: index.titel, datum: index.datum, month: index.month, added: true, actualbudget: startBudget });\n\n              }\n              else {\n                startBudget -= index.betrag;\n                this.setState({\n                  actualBudget: startBudget,\n                });\n                console.log(\"- rechnen\")\n                console.log(this.state.actualBudget)\n                update({ inputs_id: index.inputs_id, betrag: index.betrag, ausgabe: index.ausgabe, titel: index.titel, datum: index.datum, month: index.month, added: true, actualbudget: startBudget });\n\n              }\n            }\n            else {\n              console.log(\"else\");\n              let actualBudget = index.actualbudget;\n              this.setState({\n                actualBudget: actualBudget,\n              })\n              if (index.ausgabe) {\n\n                actualBudget += index.betrag;\n                this.setState({\n                  actualBudget: actualBudget,\n                })\n                update({ inputs_id: index.inputs_id, betrag: index.betrag, ausgabe: index.ausgabe, titel: index.titel, datum: index.datum, month: index.month, added: true, actualbudget: actualBudget });\n\n              }\n              else {\n                actualBudget -= index.betrag;\n                this.setState({\n                  actualBudget: actualBudget,\n                });\n                update({ inputs_id: index.inputs_id, betrag: index.betrag, ausgabe: index.ausgabe, titel: index.titel, datum: index.datum, month: index.month, added: true, actualbudget: actualBudget });\n\n              }\n            }\n          }\n          return {\n          }\n        })\n      }\n    })\n  }\n\n  public getActualBudget2 = () => {\n    const { getAll, update } = useIndexedDB('inputs');\n    getAll().then((inputs) => {\n\n      this.setState({\n        inputs: inputs,\n        summeInputs: 0,\n      })\n    }).then(() => {\n      if (this.state.inputs.length !== 0) {\n        this.state.inputs.map((index: any) => {\n          if (index.month === this.state.month) {\n            let summeInputs = this.state.summeInputs;\n            if (index.ausgabe) {\n              summeInputs -= index.betrag;\n\n              this.setState({\n                summeInputs: summeInputs,\n              })\n            } else {\n              summeInputs += index.betrag;\n\n              this.setState({\n                summeInputs: summeInputs,\n              })\n            }\n          }\n        })\n      }\n    }).then(() => {\n      let actualBudget = this.state.startbudget - this.state.summeInputs;\n      this.setState({\n        actualBudget: actualBudget,\n      })\n    })\n  }\n\n  public setAddedNew = () => {\n    const { getAll, update } = useIndexedDB('inputs');\n\n    getAll().then((inputs) => {\n      this.setState({\n        inputsSetNew: inputs,\n\n      })\n\n    }).then(() => {\n      if (this.state.inputsSetNew.length !== 0) {\n\n        console.log(\"actualReset: \" + this.state.actualBudget)\n        this.state.inputs.map((index: any) => {\n          if (index.month === this.state.month && index.added === true) {\n            update({ inputs_id: index.inputs_id, betrag: index.betrag, ausgabe: index.ausgabe, titel: index.titel, datum: index.datum, month: index.month, added: false, actualbudget: index.actualbudget })\n          }\n\n        })\n      }\n    }).then(() => {\n      this.setState({\n        actualBudget: this.state.startbudget\n      })\n      this.getActualBudget2();\n    })\n\n\n  }\n\n\n\n\n\n  public verifiyMonth = () => {\n    const { getAll } = useIndexedDB('monthlist');\n    getAll().then((month) => {\n      month.map((index: any) => {\n        console.log(\"Test Month Verify: \" + this.state.month)\n        if (index.month === this.state.month) {\n          this.setState({\n            starterror: true,\n            month: \"test\",\n            normalMode: false,\n          })\n          console.log(this.state.starterror);\n        }\n      })\n    })\n\n  }\n\n  /**\n   * Diese Methode rendert die TabBar die immer am unteren Bildschirmende gezeigt wird. \n   * Außerdem wird ein Router erstellt der die Navigation zwischen den einzelnen Seiten bereit stellt.\n   * Hier werden auch die Methoden der App Klasse an die anderen Komponenten übergeben, \n   * die dann in den einzelne Komponenten als Props zur Verfügung stehen.\n   */\n  public render() {\n\n    return (\n      <IonApp onLoad={() => { this.firstLoadApp(); this.getMonthObj(); }}>\n\n        {this.state.firstLoad && (<Start startRechner={this.startRechner} getMonth={this.getMonth} getStartbudget={this.getStartbudget} month={this.state.month} startbudget={this.state.startbudget}></Start>)}\n        {this.state.starterror && (<StartError></StartError>)}\n        <IonReactRouter>\n\n          {this.state.normalMode && (<IonTabs>\n            <IonRouterOutlet>\n              <Route path=\"/newMonth\" >\n                <NewMonth getMonth={this.getMonth} getStartbudget={this.getStartbudget} pushMonthObj={this.pushMonthObj} month={this.state.month} startbudget={this.state.startbudget}></NewMonth>\n              </Route>\n              <Route path=\"/monthReview\" component={MonthReview} exact={true}> <MonthReview monthObj={this.state.monthlistDB} actualBudget={this.state.actualBudget}></MonthReview></Route>\n              <Route path=\"/actualMonth\" component={ActualMonth} exact={true}>\n                <ActualMonth month={this.state.month} budget={this.state.actualBudget} getActualBudget={this.getActualBudget2} getActualMonth={this.getActualMonth} setAddedNew={this.setAddedNew}></ActualMonth>\n              </Route>\n              <Route path=\"/newInput\" component={NewInput}>\n                <NewInput month={this.state.month} budget={this.state.actualBudget} getActualBudget={this.getActualBudget2} ></NewInput>\n              </Route>\n              <Route path=\"/\" render={() => <Redirect to=\"/start\" />} exact={true} />\n            </IonRouterOutlet>\n\n            <IonTabBar slot=\"bottom\">\n              <IonTabButton tab=\"newInput\" href=\"/newInput\" onClick={this.getActualBudget2}>\n                <IonIcon icon={addCircle} />\n                <IonLabel>New Input</IonLabel>\n              </IonTabButton>\n              <IonTabButton tab=\"actualMonth\" href=\"/actualMonth\" onClick={this.getActualBudget2}>\n                <IonIcon icon={calendar} />\n                <IonLabel> Actual Month </IonLabel>\n              </IonTabButton>\n              <IonTabButton tab=\"newMonth\" href=\"/newMonth\">\n                <IonIcon icon={addCircleOutline} />\n                <IonLabel>New Month</IonLabel>\n              </IonTabButton>\n              <IonTabButton tab=\"monthReview\" href=\"/monthReview\">\n                <IonIcon icon={calendar} />\n                <IonLabel>Month Review</IonLabel>\n              </IonTabButton>\n\n\n            </IonTabBar>\n          </IonTabs>)}\n\n        </IonReactRouter>\n      </IonApp>\n    )\n  };\n}\n\nexport default App;\n","export const DBConfig = {\n    name: 'MyDB',\n    version: 2,\n    objectStoresMeta: [\n    \n      {\n        store: 'monthlist',\n        storeConfig: { keyPath: 'id', autoIncrement: true },\n        storeSchema: [\n          { name: 'month', keypath: 'month', options: { unique: false } },\n          { name: 'startbudget', keypath: 'startbudget', options: { unique: false } },\n          {name: 'actualbudget', keypath: 'actualbudget', options: { unique: false } },\n        ]\n      },\n      {\n    \n        store: 'inputs',\n        storeConfig: { keyPath: 'inputs_id', autoIncrement: true },\n        storeSchema: [\n          { name: 'ausgabe', keypath: 'ausgabe', options: { unique: false } },\n          { name: 'titel', keypath: 'titel', options: { unique: false } },\n          { name: 'betrag', keypath: 'betrag', options: { unique: false } },\n          { name: 'datum', keypath: 'datum', options: { unique: false } },\n          { name: 'month', keypath: 'month', options: { unique: false } },\n          { name: 'added', keypath: 'added', options: { unique: false } },\n          {name: 'actualbudget', keypath: 'actualbudget', options: { unique: false } },\n\n        ]  \n      }\n      \n       \n    ],\n    \n  };\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}